{-# OPTIONS --cubical --rewriting --guarded #-}

open import Later

module Results (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Nat renaming (‚Ñï to Nat) hiding (_¬∑_ ; _^_)
open import Cubical.Data.Nat.Order
open import Cubical.Foundations.Structure
open import Cubical.Data.Empty.Base renaming (rec to exFalso)
open import Cubical.Data.Sum
open import Cubical.Data.Sigma
open import Cubical.Relation.Nullary


open import StrongBisimulation k
open import Semantics k
open import SyntacticTermPrecision k
open import GradualSTLC
open import MonFuns k

private
  variable
    l : Level
    A B : Set l
private
  ‚ñπ_ : Set l ‚Üí Set l
  ‚ñπ_ A = ‚ñπ_,_ k A




-- Results about the intensional theory


module 2Cell
  (A A' B B' : Predomain)
  (A‚ñπA' : EP A A')
  (B‚ñπB' : EP B B')
 where

  open ùïÉ
  open EP

  _‚äëA'_ : ‚ü® A' ‚ü© -> ‚ü® A' ‚ü© -> Type
  _‚äëA'_ = rel A'

  _‚äëB'_ : ‚ü® ùïÉ B' ‚ü© -> ‚ü® ùïÉ B' ‚ü© -> Type
  _‚äëB'_ = rel (ùïÉ B')

  _‚äëc_ : ‚ü® A ‚ü© -> ‚ü® A' ‚ü© -> Type
  a ‚äëc a' = (U (emb A‚ñπA') a) ‚äëA' a'

  _‚äëd_ : ‚ü® ùïÉ B ‚ü© -> ‚ü® ùïÉ B' ‚ü© -> Type
  lb ‚äëd lb' = (mapL (U (emb B‚ñπB')) lb) ‚äëB' lb'

  _‚äëf_ : ‚ü® A ==> ùïÉ B ‚ü© -> ‚ü® A' ==> ùïÉ B' ‚ü© -> Type
  f ‚äëf f' = fun-order-het A A' (ùïÉ B) (ùïÉ B') _‚äëc_ _‚äëd_ (MonFun.f f) (MonFun.f f')
  

module 2CellVertical
  (A A' A'' B B' B'' : Predomain)
  (A‚ñπA' : EP A A')
  (A'‚ñπA'' : EP A' A'')
  (B‚ñπB' : EP B B')
  (B'‚ñπB'' : EP B' B'')
  where




-- Results about the extensional theory

tick-extensionality : (X : Set) -> (lx~ : ‚ñπ (L‚Ñß X)) -> (ly : L‚Ñß X) ->
  ‚ñ∏ (Œª t -> lx~ t ‚â° ly) ->
  lx~ ‚â° next ly
tick-extensionality X lx~ ly H = Œª i t ‚Üí H t i


tick-extensionality' : (X : Set) -> (lx~ : ‚ñπ (L‚Ñß X)) -> (ly : L‚Ñß X) ->
  ((t : Tick k) -> lx~ t ‚â° ly) -> -- is there an implicit ‚ñ∏ here?
  lx~ ‚â° next ly
tick-extensionality' X lx~ ly H = Œª i t‚ÇÅ ‚Üí H t‚ÇÅ i






Œ∑‚â¢Œ¥ : (d : Predomain) -> (x : ‚ü® d ‚ü©) -> (n : Nat) ->
  ¬¨ ((Œ∑ x) ‚â° (Œ¥ ^ n) ‚Ñß)
Œ∑‚â¢Œ¥ d x zero contra = {!!}
Œ∑‚â¢Œ¥ d x (suc n) = {!!}


open ùïÉ ‚Ñï -- defines the lock-step relation


-- Bisimilarity is non-trivial at Nat type
‚âà-non-trivial : {!!}
‚âà-non-trivial = {!!}

-- Bisimilarity is not transitive at Nat type



-- Adequacy of lock-step relation
module AdequacyLockstep
  -- (lx ly : L‚Ñß Nat)
  -- (lx‚âæly : lx ‚âæ ly)
  where

  _‚âæ'_ : L‚Ñß Nat ‚Üí L‚Ñß Nat ‚Üí Type
  _‚âæ'_ = ord' (next _‚âæ_)

  {-
  lx‚âæ'ly : lx ‚âæ' ly
  lx‚âæ'ly = transport (Œª i ‚Üí unfold-ord i lx ly) lx‚âæly
  -}

  eq-later-eq-now : (X : Set) -> (lx~ : ‚ñπ (L‚Ñß X)) -> (ly : L‚Ñß X) ->
    ‚ñ∏ (Œª t -> lx~ t ‚â° ly) ->
    Œ∏ lx~ ‚â° Œ∏ (next ly)
  eq-later-eq-now = {!!}


  sigma-later : (X : Set) (A : X -> Tick k -> Type) ->
    ‚ñ∏ (Œª t -> Œ£ X Œª x -> A x t) ->
    Œ£ (‚ñπ X) Œª x~ -> ‚ñ∏ (Œª t -> A (x~ t) t)
  sigma-later X A H = (Œª t ‚Üí fst (H t)) , (Œª t ‚Üí snd (H t))

  ‚âæ->‚âæ' : (lx ly : L‚Ñß Nat) ->
    lx ‚âæ ly -> lx ‚âæ' ly
  ‚âæ->‚âæ' lx ly lx‚âæly = transport (Œª i ‚Üí unfold-ord i lx ly) lx‚âæly

  adequate-err-baby :
    ‚ñπ ((lx : L‚Ñß Nat) ->
      (H-lx : lx ‚âæ' Œ¥ ‚Ñß) ->
      (lx ‚â° ‚Ñß) ‚äé (lx ‚â° Œ¥ ‚Ñß)) ->
    (lx : L‚Ñß Nat) ->
    (H-lx : lx ‚âæ' Œ¥ ‚Ñß) ->
    (lx ‚â° ‚Ñß) ‚äé (lx ‚â° Œ¥ ‚Ñß)
  adequate-err-baby _ (Œ∑ x) ()
  adequate-err-baby _ ‚Ñß _ = inl refl
  adequate-err-baby IH (Œ∏ lx~) H-lx =
    inr (cong Œ∏ (tick-extensionality Nat lx~ ‚Ñß
      Œª t ‚Üí {!!}))


  data GuardedNat : Type where
    zro : GuardedNat
    suc : ‚ñπ Nat -> GuardedNat

  _‚â§GN_ : GuardedNat -> Nat -> Type
  n~ ‚â§GN m = {!!}

{-
  adequate-err :
    ‚ñπ ((m : Nat) ->
    (lx : L‚Ñß Nat) ->
    (H-lx : lx ‚âæ' (Œ¥ ^ m) ‚Ñß) ->
    (Œ£ (‚ñπ Nat) Œª n -> (n ‚â§GN m) √ó (lx ‚â° (Œ¥ ^ n) ‚Ñß))) ->
    (m : Nat) ->
    (lx : L‚Ñß Nat) ->
    (H-lx : lx ‚âæ' (Œ¥ ^ m) ‚Ñß) ->
    (Œ£ (‚ñπ Nat) Œª n -> (n ‚â§ m) √ó ((lx ‚â° (Œ¥ ^ n) ‚Ñß)))
  adequate-err _ zero (Œ∑ x) ()
  adequate-err _ (suc m') (Œ∑ x) ()
  adequate-err _ m ‚Ñß H-lx = next (0 , {!!})
  adequate-err _ zero (Œ∏ lx~) ()
  adequate-err IH (suc m') (Œ∏ lx~) H-lx = {!!}
-}

  ‚âæ'-Œ¥ : (lx ly : L‚Ñß Nat) -> (lx ‚âæ' ly) -> (lx ‚âæ' (Œ¥ ly))
  ‚âæ'-Œ¥ = {!!}


  adequate-err-2 : (m : Nat) -> Œ£ Nat Œª n -> (n ‚â§ m) √ó
    (‚ñπ ((lx : L‚Ñß Nat) ->
        (H-lx : lx ‚âæ' (Œ¥ ^ m) ‚Ñß) ->
        (lx ‚â° (Œ¥ ^ n) ‚Ñß)) ->
      (lx : L‚Ñß Nat) ->
      (H-lx : lx ‚âæ' (Œ¥ ^ m) ‚Ñß) ->
      ((lx ‚â° (Œ¥ ^ n) ‚Ñß)))
  adequate-err-2 zero = zero , ‚â§-refl , thm-zero
    where
      thm-zero : ‚ñπ ((lx : L‚Ñß Nat) ‚Üí lx ‚âæ' (Œ¥ ^ zero) ‚Ñß ‚Üí lx ‚â° (Œ¥ ^ zero) ‚Ñß) ‚Üí
                    (lx : L‚Ñß Nat) ‚Üí lx ‚âæ' (Œ¥ ^ zero) ‚Ñß ‚Üí lx ‚â° (Œ¥ ^ zero) ‚Ñß
      thm-zero IH ‚Ñß H-lx = refl
  adequate-err-2 (suc m') =
    (suc (fst (adequate-err-2 m'))) , ({!!} , {!!})
      where
        thm-suc-m' : {!!}
        thm-suc-m' IH ‚Ñß H-lx = {!!}
        thm-suc-m' IH (Œ∏ lx~) H-lx =
          cong Œ∏ (tick-irrelevance Nat lx~ ((Œ¥ ^ fst (adequate-err-2 m')) ‚Ñß)
          Œª t ‚Üí {!!})


-- Given:  Œ∏ lx~ ‚âæ' (Œ¥ ^ suc m') ‚Ñß
-- i.e.    Œ∏ lx~ ‚âæ' Œ∏ (next (Œ¥ ^ m') ‚Ñß)
-- i.e.    ‚ñ∏ (Œª t -> (lx~ t) ‚âæ (Œ¥ ^ m') ‚Ñß)

-- By IH, we have
-- ‚ñ∏ (Œª t -> lx~ t ‚â° (Œ¥ ^ n') ‚Ñß for some n')

-- By tick extensionality, we have
-- lx~ ‚â° next (Œ¥ ^ n') ‚Ñß, so
-- Œ∏ lx~ ‚â° Œ∏ (next (Œ¥ ^ n') ‚Ñß) ‚â° (Œ¥ ^ (suc n')) ‚Ñß


-- Adequacy of weak bisimilarity relation

open Bisimilarity ‚Ñï

module AdequacyBisimilarity
  (lx ly : L‚Ñß Nat)
  (lx‚âàly : lx ‚âà ly) where


-- Combined result: Adequacy of extensional ordering

open ExtRel ‚Ñï

module AdequacyExt
  (lx ly : L‚Ñß Nat)
  (lx‚ä¥ly : lx ‚ä¥ ly) where

  adequate-1 : (n : Nat) (x : Nat) ->
    (lx ‚â° (Œ¥ ^ n) (Œ∑ x)) ->
    Œ£ Nat Œª m -> ly ‚â° (Œ¥ ^ m) (Œ∑ x)
  adequate-1 n x H-lx = {!!}

  adequate-2 : (m : Nat) ->
    (ly ‚â° (Œ¥ ^ m) ‚Ñß) ->
    Œ£ Nat Œª n -> lx ‚â° (Œ¥ ^ n) ‚Ñß
  adequate-2 m H-ly = {!!}



  




{-
gradual_guarantee : (M : Tm ¬∑ nat) (N : Tm ¬∑ nat) ->
                    ¬∑ |- M ‚äëtm N # nat ->
                    ‚ü¶ M ‚üß ‚â≤ ‚ü¶ N ‚üß
-}
