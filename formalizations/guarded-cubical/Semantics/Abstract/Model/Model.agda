 -- to allow opening this module in other files while there are still holes
{-# OPTIONS --allow-unsolved-metas #-}

{-# OPTIONS --lossy-unification #-}


module Semantics.Abstract.Model.Model where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Algebra.Monoid
open import Cubical.Data.List

open import Cubical.Categories.Category.Base

open import Cubical.HigherCategories.ThinDoubleCategory.ThinDoubleCat
open import Cubical.HigherCategories.ThinDoubleCategory.Constructions.Terminal
open import Cubical.HigherCategories.ThinDoubleCategory.Constructions.BinProduct


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level


-- An abstract model of the logic consists of
-- a thin double category C, such that
-- 
-- For each object S ‚àà C‚ÇÄ we have a (commutative) monoid Ptb_S with
-- an injective homomorphism ptb_S : Ptb_S -> VerticalEndo(S)
--
-- ...such that the following squares have at most one filler by
-- ptb_X and ptb_Y respectively:

--        c                   d
--   X o----* Y           X o----* Y
--            |           |        
--            | Œ¥Y    Œ¥X  |        
--            v           v        
--   X o----* Y           X o----* Y
--       c                    d



-- The objects should be thought of as types with a relation.
-- The horizontal morphisms of C should be thought of as relations.
-- The vertical morphisms of C should be thought of as monotone functions.



isLeftInvertible : {‚ÑìA ‚ÑìB : Level} {A : Type ‚ÑìA} {B : Type ‚ÑìB} ->
  (f : A -> B) -> Type (‚Ñì-max ‚ÑìA ‚ÑìB)
isLeftInvertible {A = A} {B = B} f =
 Œ£[ g ‚àà (B -> A) ] (‚àÄ a -> g (f a) ‚â° a)


InjectiveMonoidHom : {‚Ñìm ‚Ñìn : Level} ->
  (M : Monoid ‚Ñìm) (N : Monoid ‚Ñìn) -> Type (‚Ñì-max ‚Ñìm ‚Ñìn)
InjectiveMonoidHom M N =
  Œ£[ f ‚àà MonoidHom M N ] isLeftInvertible (fst f)

-- Monoid of vertical endomorphisms of a given object of the given double category
VEndo : {‚Ñì ‚Ñì' : Level} ->
  (C : ThinDoubleCat ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''') -> (X : C .ThinDoubleCat.ob) -> Monoid ‚Ñì'
VEndo C X = makeMonoid
    {M = HomV[ X , X ]} idV _‚ãÜV_ (MorphismsForObj.isSetHom Vert)
    (Œª p q r -> sym (‚ãÜAssoc p q r)) (Œª p -> ‚ãÜIdR p) (Œª p -> ‚ãÜIdL p)
      where
        open ThinDoubleCat C
        open MorphismsForObj Vert



record Model (‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level) :
  Type (‚Ñì-suc (‚Ñì-max (‚Ñì-max ‚Ñì ‚Ñì') (‚Ñì-max ‚Ñì'' ‚Ñì'''))) where

  -- A thin double category with additional structure
  field
    cat : ThinDoubleCat ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì'''
    term : Terminal cat
    prod : BinProducts cat
    -- exponentials : Exponentials cat binProd
    -- binCoprod : BinCoproducts cat
    -- monad : StrongExtensionSystem binProd

  -- module C = ThinDoubleCat C
  open ThinDoubleCat cat public

  open TerminalNotation cat term public
  open BinProdNotation cat prod public

  -- Perturbations
  field
    Ptb : (X : ob) -> Monoid ‚Ñì'
    ptb : (X : ob) -> InjectiveMonoidHom (Ptb X) (VEndo cat X)

  ptb-f : {X : cat .ThinDoubleCat.ob} -> ‚ü® (Ptb X) ‚ü© -> ‚ü® VEndo cat X ‚ü©
  ptb-f {X} = fst (fst (ptb X))

  -- Natural numbers, dynamic type, and error
  field

    nat : ob
    nat-fp : CatIso VCat {!!} nat
    -- match-nat

    dyn : ob
    -- inj : cat      [ nat + (dyn ‚áÄ dyn) , dyn ]
    -- prj : ClLinear [ dyn , nat + (dyn ‚áÄ dyn) ]


    err : ‚àÄ {a} ‚Üí HomV[ {!!} , {!!} ]

    -- If the abstract model had a notion of later, we could
    -- actually define dyn abstractly as an object `dyn` with an
    -- isomorphism between `dyn` and `nat + later (dyn ‚áÄ dyn)`
    -- We could also define the relation on dyn abstractly
    -- by defining the relations on sum types, function spaces,
    -- and later.



{-
 field
    -- a weak model of the natural numbers, but good enough for our syntax
    nat : cat .ob
    nat-fp : CatIso cat (ùüô + nat) nat

    -- now the dyn stuff
    -- a model of dyn/casts
    dyn : cat .ob

    -- at this point we will model injection and projection as
    -- arbitrary morphisms
    inj : cat      [ nat + (dyn ‚áÄ dyn) , dyn ]
    prj : ClLinear [ dyn , nat + (dyn ‚áÄ dyn) ]

    -- and the error of course!
    -- err : 1 ‚áÄ A
    -- naturality says err ‚â° T f ‚àò err
    -- not sure if that's exactly right...
    err : ‚àÄ {a} ‚Üí cat [ ùüô , T a ]
  ‚Ñß : ‚àÄ {Œì a} ‚Üí cat [ Œì , T a ]
  ‚Ñß = err ‚àò‚ü® cat ‚ü© !t

  field
    ‚Ñß-homo : ‚àÄ {Œì a b} ‚Üí (f : Linear Œì [ a , b ])
           -- define this explicitly as a profunctor?
           -- f ‚àò‚ü® Linear Œì ‚ü© (F ‚Ñß) ‚â° F ‚Ñß
           ‚Üí bindP f ‚àò‚ü® cat ‚ü© ((cat .id ,p ‚Ñß)) ‚â° ‚Ñß

-}


  -- field
  --   sq-filler-left-prop : ‚àÄ {X Y} ->
  --     (c : HomH[ X , Y ]) (Œ¥Y : HomV[ Y , Y ]) ->
  --     isProp (Œ£[ pX ‚àà ‚ü® Ptb X ‚ü© ] 2Cell c c (ptb-f pX) Œ¥Y)

  --   sq-filler-right-prop : ‚àÄ {X Y} ->
  --     (d : HomH[ X , Y ]) (Œ¥X : HomV[ X , X ]) ->
  --     isProp (Œ£[ pY ‚àà ‚ü® Ptb Y ‚ü© ] 2Cell d d Œ¥X (ptb-f pY))


