{-# OPTIONS --rewriting --guarded #-}

{-# OPTIONS --lossy-unification #-}

 -- to allow opening this module in other files while there are still holes
{-# OPTIONS --allow-unsolved-metas #-}

open import Common.Later

open import Common.Later

module Semantics.Concrete.DoublePoset.KleisliFunctors (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Data.Sigma
open import Cubical.Foundations.Structure


open import Common.Common
open import Semantics.Concrete.GuardedLiftError k
open import Semantics.Concrete.DoublePoset.Base
open import Semantics.Concrete.DoublePoset.Morphism
open import Semantics.Concrete.DoublePoset.Constructions
open import Semantics.Concrete.DoublePoset.DPMorRelation
open import Semantics.Concrete.DoublePoset.DblPosetCombinators
open import Semantics.Concrete.DoublePoset.PBSquare

open import Semantics.Concrete.DoublePoset.ErrorDomain k
open import Semantics.Concrete.LockStepErrorOrdering k
open import Semantics.Concrete.WeakBisimilarity k

open import Semantics.Concrete.DoublePoset.Error
open import Semantics.Concrete.DoublePoset.Monad k
open import Semantics.Concrete.DoublePoset.MonadRelationalResults k
open import Semantics.Concrete.DoublePoset.FreeErrorDomain k
open import Semantics.Concrete.DoublePoset.MonadCombinators k

open ClockedCombinators k

private
  variable
    ‚Ñì ‚Ñì' : Level
    ‚ÑìA  ‚Ñì‚â§A  ‚Ñì‚âàA  : Level
    ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA' : Level
    ‚ÑìB  ‚Ñì‚â§B  ‚Ñì‚âàB  : Level
    ‚ÑìB' ‚Ñì‚â§B' ‚Ñì‚âàB' : Level
    ‚ÑìŒì ‚Ñì‚â§Œì ‚Ñì‚âàŒì : Level
    ‚ÑìC : Level
    ‚ÑìA·µ¢  ‚Ñì‚â§A·µ¢  ‚Ñì‚âàA·µ¢  : Level
    ‚ÑìA·µ¢' ‚Ñì‚â§A·µ¢' ‚Ñì‚âàA·µ¢' : Level
    ‚ÑìA‚Çí  ‚Ñì‚â§A‚Çí  ‚Ñì‚âàA‚Çí  : Level
    ‚ÑìA‚Çí' ‚Ñì‚â§A‚Çí' ‚Ñì‚âàA‚Çí' : Level
    ‚ÑìB·µ¢  ‚Ñì‚â§B·µ¢  ‚Ñì‚âàB·µ¢  : Level
    ‚ÑìB·µ¢' ‚Ñì‚â§B·µ¢' ‚Ñì‚âàB·µ¢' : Level
    ‚ÑìB‚Çí' ‚Ñì‚â§B‚Çí' ‚Ñì‚âàB‚Çí' : Level
    ‚ÑìB‚Çí  ‚Ñì‚â§B‚Çí  ‚Ñì‚âàB‚Çí  : Level
    ‚Ñìc ‚Ñìd ‚ÑìR ‚Ñìc·µ¢ ‚Ñìc‚Çí ‚Ñìd·µ¢ ‚Ñìd‚Çí : Level
    ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ : Level
    ‚ÑìA‚ÇÅ' ‚Ñì‚â§A‚ÇÅ' ‚Ñì‚âàA‚ÇÅ' : Level
    ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ : Level
    ‚ÑìA‚ÇÇ' ‚Ñì‚â§A‚ÇÇ' ‚Ñì‚âàA‚ÇÇ' : Level
    ‚ÑìA‚ÇÉ ‚Ñì‚â§A‚ÇÉ ‚Ñì‚âàA‚ÇÉ : Level

    ‚ÑìB‚ÇÅ ‚Ñì‚â§B‚ÇÅ ‚Ñì‚âàB‚ÇÅ : Level
    ‚ÑìB‚ÇÇ ‚Ñì‚â§B‚ÇÇ ‚Ñì‚âàB‚ÇÇ : Level
    ‚ÑìB‚ÇÉ ‚Ñì‚â§B‚ÇÉ ‚Ñì‚âàB‚ÇÉ : Level
   

private
  ‚ñπ_ : Type ‚Ñì ‚Üí Type ‚Ñì
  ‚ñπ_ A = ‚ñπ_,_ k A

open F-ob
open F-mor
open LiftPredomain
open PBMor


-- Pair' :
--   {‚ÑìA‚Çí‚ÇÅ ‚Ñì‚â§A‚Çí‚ÇÅ ‚Ñì‚âàA‚Çí‚ÇÅ ‚ÑìA‚Çí‚ÇÇ ‚Ñì‚â§A‚Çí‚ÇÇ ‚Ñì‚âàA‚Çí‚ÇÇ : Level}
--   {A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA}
--   {A‚Çí‚ÇÅ : PosetBisim ‚ÑìA‚Çí‚ÇÅ ‚Ñì‚â§A‚Çí‚ÇÅ ‚Ñì‚âàA‚Çí‚ÇÅ}
--   {A‚Çí‚ÇÇ : PosetBisim ‚ÑìA‚Çí‚ÇÇ ‚Ñì‚â§A‚Çí‚ÇÇ ‚Ñì‚âàA‚Çí‚ÇÇ} ‚Üí
--   PBMor A A‚Çí‚ÇÅ ‚Üí PBMor A A‚Çí‚ÇÇ ‚Üí PBMor A (A‚Çí‚ÇÅ √ódp A‚Çí‚ÇÇ)
-- Pair' = {!PairFun!}

-- Times :
--   {‚ÑìA·µ¢‚ÇÅ ‚Ñì‚â§A·µ¢‚ÇÅ ‚Ñì‚âàA·µ¢‚ÇÅ ‚ÑìA·µ¢‚ÇÇ ‚Ñì‚â§A·µ¢‚ÇÇ ‚Ñì‚âàA·µ¢‚ÇÇ
--    ‚ÑìA‚Çí‚ÇÅ ‚Ñì‚â§A‚Çí‚ÇÅ ‚Ñì‚âàA‚Çí‚ÇÅ ‚ÑìA‚Çí‚ÇÇ ‚Ñì‚â§A‚Çí‚ÇÇ ‚Ñì‚âàA‚Çí‚ÇÇ : Level}
--   {A·µ¢‚ÇÅ : PosetBisim ‚ÑìA·µ¢‚ÇÅ ‚Ñì‚â§A·µ¢‚ÇÅ ‚Ñì‚âàA·µ¢‚ÇÅ}
--   {A·µ¢‚ÇÇ : PosetBisim ‚ÑìA·µ¢‚ÇÇ ‚Ñì‚â§A·µ¢‚ÇÇ ‚Ñì‚âàA·µ¢‚ÇÇ}
--   {A‚Çí‚ÇÅ : PosetBisim ‚ÑìA‚Çí‚ÇÅ ‚Ñì‚â§A‚Çí‚ÇÅ ‚Ñì‚âàA‚Çí‚ÇÅ}
--   {A‚Çí‚ÇÇ : PosetBisim ‚ÑìA‚Çí‚ÇÇ ‚Ñì‚â§A‚Çí‚ÇÇ ‚Ñì‚âàA‚Çí‚ÇÇ} ‚Üí
--   PBMor A·µ¢‚ÇÅ A‚Çí‚ÇÅ ‚Üí PBMor A·µ¢‚ÇÇ A‚Çí‚ÇÇ ‚Üí PBMor (A·µ¢‚ÇÅ √ódp A·µ¢‚ÇÇ) (A‚Çí‚ÇÅ √ódp A‚Çí‚ÇÇ)
-- Times f g = Pair' (f ‚àòp œÄ1) (g ‚àòp œÄ2)

-- Comp' :
--     {Œì : PosetBisim ‚ÑìŒì ‚Ñì‚â§Œì ‚Ñì‚âàŒì}
--     {A‚ÇÅ : PosetBisim ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ}
--     {A‚ÇÇ : PosetBisim ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ}
--     {A‚ÇÉ : PosetBisim ‚ÑìA‚ÇÉ ‚Ñì‚â§A‚ÇÉ ‚Ñì‚âàA‚ÇÉ} ‚Üí
--     ‚ü® (Œì √ódp A‚ÇÇ ==> A‚ÇÉ) ‚ü© -> ‚ü® (Œì √ódp A‚ÇÅ ==> A‚ÇÇ) ‚ü© -> ‚ü® (Œì √ódp A‚ÇÅ ==> A‚ÇÉ) ‚ü©
-- Comp' {Œì = Œì} g f = g ‚àòp Pair' œÄ1 f
-- record {
--   f = Œª { (Œ≥ , a) ‚Üí PBMor.f f (Œ≥ , (PBMor.f g (Œ≥ , a))) } ;
--   isMon = Œª { {Œ≥1 , a1} {Œ≥2 , a2} (Œ≥1‚â§Œ≥2 , a1‚â§a2) ‚Üí
--     isMon f (Œ≥1‚â§Œ≥2 , (isMon g (Œ≥1‚â§Œ≥2 , a1‚â§a2))) } ;
--   pres‚âà = Œª { {Œ≥1 , a1} {Œ≥2 , a2} (Œ≥1‚âàŒ≥2 , a1‚âàa2) ‚Üí
--     pres‚âà f (Œ≥1‚âàŒ≥2 , (pres‚âà g (Œ≥1‚âàŒ≥2 , a1‚âàa2))) } }


-----------------------------------------------
-- The Kleisli value and computation morphisms
-----------------------------------------------

-- The Kleisli value morphisms from A·µ¢ to A‚Çí are defined to be error
-- domain morphisms from FA·µ¢ to FA‚Çí.
KlMorV : (A·µ¢ : PosetBisim ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢ ‚Ñì‚âàA·µ¢) (A‚Çí : PosetBisim ‚ÑìA‚Çí ‚Ñì‚â§A‚Çí ‚Ñì‚âàA‚Çí) ‚Üí
  Type (‚Ñì-max (‚Ñì-max (‚Ñì-max ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢) ‚Ñì‚âàA·µ¢) ((‚Ñì-max (‚Ñì-max ‚ÑìA‚Çí ‚Ñì‚â§A‚Çí) ‚Ñì‚âàA‚Çí)))
KlMorV A·µ¢ A‚Çí = ErrorDomMor (F-ob A·µ¢) (F-ob A‚Çí)

-- The Kleisli computation morphisms from B·µ¢ to B‚Çí are defined to be
-- predomain morphisms from UB·µ¢ to UB‚Çí
KlMorC : (B·µ¢ : ErrorDomain ‚ÑìB·µ¢ ‚Ñì‚â§B·µ¢ ‚Ñì‚âàB·µ¢) (B‚Çí : ErrorDomain ‚ÑìB‚Çí ‚Ñì‚â§B‚Çí ‚Ñì‚âàB‚Çí) ‚Üí
  Type (‚Ñì-max (‚Ñì-max (‚Ñì-max ‚ÑìB·µ¢ ‚Ñì‚â§B·µ¢) ‚Ñì‚âàB·µ¢) ((‚Ñì-max (‚Ñì-max ‚ÑìB‚Çí ‚Ñì‚â§B‚Çí) ‚Ñì‚âàB‚Çí)))
KlMorC B·µ¢ B‚Çí = PBMor (U-ob B·µ¢) (U-ob B‚Çí)


-- Kleisli identity morphisms

Id-KV : (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) ‚Üí KlMorV A A
Id-KV A = IdE

Id-KC : (B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB) ‚Üí KlMorC B B
Id-KC B = Id


--------------------
-- Kleisli Functors
--------------------



-- The Kleisli arrow functor
-----------------------------

_‚ü∂kob_ : (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) (B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB) ‚Üí
    ErrorDomain
        (‚Ñì-max (‚Ñì-max (‚Ñì-max ‚ÑìA ‚Ñì‚â§A) ‚Ñì‚âàA) (‚Ñì-max (‚Ñì-max ‚ÑìB ‚Ñì‚â§B) ‚Ñì‚âàB))
        (‚Ñì-max ‚ÑìA ‚Ñì‚â§B)
        (‚Ñì-max (‚Ñì-max ‚ÑìA ‚Ñì‚âàA) ‚Ñì‚âàB)
A ‚ü∂kob B = A ‚ü∂ob B



-- Some auxiliary definitions used below.

-- Map' : ‚àÄ {A·µ¢ : PosetBisim ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢ ‚Ñì‚âàA·µ¢} {A‚Çí : PosetBisim ‚ÑìA‚Çí ‚Ñì‚â§A‚Çí ‚Ñì‚âàA‚Çí} ‚Üí
--   PBMor A·µ¢ A‚Çí ‚Üí PBMor (ùïÉ A·µ¢) (ùïÉ A‚Çí)
-- Map' = U-mor ‚àò F-mor

Map' : ‚àÄ {A·µ¢ : PosetBisim ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢ ‚Ñì‚âàA·µ¢} {A‚Çí : PosetBisim ‚ÑìA‚Çí ‚Ñì‚â§A‚Çí ‚Ñì‚âàA‚Çí} ‚Üí
  PBMor ((A·µ¢ ==> A‚Çí) √ódp ùïÉ A·µ¢) (ùïÉ A‚Çí)
Map' = Uncurry MapCombinator.Map
-- ((Œì √ódp A·µ¢) ==> A‚Çí) ‚Üí ((Œì √ódp ùïÉ A·µ¢) ==> ùïÉ A‚Çí)

UŒµ : ‚àÄ {B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB} ‚Üí PBMor (ùïÉ (U-ob B)) (U-ob B)
UŒµ {B = B} = U-mor (Ext Id)
  where
    open ExtAsEDMorphism {A = U-ob B} {B = B}

UŒµ-Œ∑ : ‚àÄ {B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB} ‚Üí
  ‚àÄ b ‚Üí UŒµ {B = B} .f (Œ∑ b) ‚â° b
UŒµ-Œ∑ {‚ÑìB = ‚ÑìB} {B = B} b = Equations.ext-Œ∑ Id b
  where
    open ExtAsEDMorphism {A = U-ob B} {B = B}
    -- open CBPVExt {‚ÑìA = ‚ÑìB} {‚ÑìB = ‚ÑìB} ‚ü® B ‚ü© ‚ü® B ‚ü©


-- We are given a Kleisli value morphism œï from A‚Çí to A·µ¢,
-- i.e. an error domain morphism from FA‚Çí to FA·µ¢.
--
-- The result is a Kleisli computation morphism from
-- A·µ¢ ‚ü∂kob B to A‚Çí ‚ü∂kob B, i.e. a predomain morphism from
-- U(A·µ¢ ‚ü∂ob B) to U(A‚Çí ‚ü∂ob B).
KlArrowMorphism·¥∏ :
    {A·µ¢ : PosetBisim  ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢ ‚Ñì‚âàA·µ¢} {A‚Çí : PosetBisim  ‚ÑìA‚Çí ‚Ñì‚â§A‚Çí ‚Ñì‚âàA‚Çí} ‚Üí
    (œï : KlMorV A‚Çí A·µ¢) (B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB) ‚Üí
    KlMorC (A·µ¢ ‚ü∂kob B) (A‚Çí ‚ü∂kob B)
KlArrowMorphism·¥∏ {A·µ¢ = A·µ¢} {A‚Çí = A‚Çí} œï B =
  Curry (With2nd UŒµ ‚àòp' Map' ‚àòp' With2nd (U-mor œï) ‚àòp' With2nd (Œ∑-mor))
  

  -- Curry ({!!} --> UFUB --> UB
  --        ‚àòp' {!!} -- U (A ‚ü∂kob B) √ódp UFA·µ¢ --> UFUB
  --        ‚àòp' With2nd (U-mor œï)
  --        ‚àòp' With2nd (Œ∑-mor A‚Çí))
         
-- Curry ({!!} ‚àòp  U-mor (F-mor {!!}) ‚àòp (U-mor œï) ‚àòp With2nd (Œ∑-mor A‚Çí))

-- We need to return a predomain morphism from U(A·µ¢ ‚ü∂ B) to U(A‚Çí ‚ü∂ B).
-- 
-- So let g : U(A·µ¢ ‚ü∂ob B), i.e. g : A·µ¢ ==> UB. Then we have
--
--       Œ∑          Uœï          UFg          UŒµ
--  A‚Çí -----> UFA‚Çí -----> UFA·µ¢ -----> UFUB -----> UB

syntax KlArrowMorphism·¥∏ œï B = œï ‚ü∂K·¥∏ B


-----------------------------------------------------------------

-- We are given a Kleisli computation morphism f from B·µ¢ to B‚Çí, i.e. a
-- predomain morphism from UB·µ¢ to UB‚Çí
--
-- The result is a Kleisli value morphism from
-- A ‚ü∂kob B·µ¢ to A ‚ü∂kob B‚Çí, i.e. a predomain morphism from
-- U(A ‚ü∂ob B·µ¢) to U(A ‚ü∂ob B‚Çí).

KlArrowMorphism·¥ø :
  {B·µ¢ : ErrorDomain ‚ÑìB·µ¢ ‚Ñì‚â§B·µ¢ ‚Ñì‚âàB·µ¢} {B‚Çí : ErrorDomain ‚ÑìB‚Çí ‚Ñì‚â§B‚Çí ‚Ñì‚âàB‚Çí} ‚Üí
  (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) ‚Üí (f : KlMorC B·µ¢ B‚Çí) ‚Üí
  KlMorC (A ‚ü∂kob B·µ¢) (A ‚ü∂kob B‚Çí)
KlArrowMorphism·¥ø A f = Curry (f ‚àòp App)

-- We need to return a predomain morphism from U(A ‚ü∂ B·µ¢) to U(A ‚ü∂ B‚Çí).
-- 
-- So let g : U(A ‚ü∂ob B·µ¢), i.e. g : A ==> UB·µ¢. Then we have
--
--       g          f         
--   A -----> UB·µ¢ -----> UB‚Çí

_‚ü∂K·¥ø_ = KlArrowMorphism·¥ø

-----------------------------------------------------------------
-- Separate functoriality

open Map
open MapProperties


KlArrowMorphism·¥∏-id :
  {A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA} (B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB) ‚Üí
  (Id-KV A) ‚ü∂K·¥∏ B ‚â° Id
KlArrowMorphism·¥∏-id {A = A} B = eqPBMor _ _ (funExt (Œª g ‚Üí eqPBMor _ _ (funExt
  (Œª x ‚Üí
    UŒµ .f (map (g .f) (Œ∑ x))
     ‚â°‚ü® (Œª i ‚Üí UŒµ {B = B} .f (map-Œ∑ (g .f) x i)) ‚ü©
   UŒµ .f (Œ∑ (g .f x))
     ‚â°‚ü® UŒµ-Œ∑ (g .f x) ‚ü©
   g .f x ‚àé))))

  -- ((Œª x ‚Üí UŒµ .f (map (g .f) (Œ∑ x)))
  --   ‚â°‚ü® {!!} ‚ü©
  -- (Œª x ‚Üí UŒµ .f (Œ∑ (g .f x)))
  --   ‚â°‚ü® {!!} ‚ü©
  -- g .f ‚àé  )))

  where open CBPVExt ‚ü® A ‚ü© ‚ü® B ‚ü©


KlArrowMorphism·¥ø-id :
  {B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB} (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) ‚Üí
  A ‚ü∂K·¥ø (Id-KC B) ‚â° Id
KlArrowMorphism·¥ø-id B = eqPBMor _ _ (funExt (Œª x ‚Üí eqPBMor _ _ refl))

-- Not needed as of now...
KlArrowMorphism·¥∏-comp :
  {A‚ÇÅ : PosetBisim  ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ} {A‚ÇÇ : PosetBisim  ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ} {A‚ÇÉ : PosetBisim ‚ÑìA‚ÇÉ ‚Ñì‚â§A‚ÇÉ ‚Ñì‚âàA‚ÇÉ} ‚Üí
  (œï : KlMorV A‚ÇÉ A‚ÇÇ) (œï' : KlMorV A‚ÇÇ A‚ÇÅ) (B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB) ‚Üí
  (œï' ‚àòed œï) ‚ü∂K·¥∏ B ‚â° (œï ‚ü∂K·¥∏ B) ‚àòp (œï' ‚ü∂K·¥∏ B)
KlArrowMorphism·¥∏-comp œï œï' B =
  eqPBMor _ _ (funExt (Œª h ‚Üí eqPBMor _ _ (funExt (Œª x ‚Üí {!!}))))
-- KlArrowMorphism·¥∏-comp = {!!}
  where
    open MonadLaws.Ext-Assoc
    open CBPVExt


-- LHS:
--       Œ∑           Uœï         Uœï'         UFg          UŒµ
--  A‚ÇÉ -----> UFA‚ÇÉ -----> UFA‚ÇÇ -----> UFA‚ÇÅ -----> UFUB -----> UB




KlArrowMorphism·¥ø-comp :
  {B‚ÇÅ : ErrorDomain ‚ÑìB‚ÇÅ ‚Ñì‚â§B‚ÇÅ ‚Ñì‚âàB‚ÇÅ}
  {B‚ÇÇ : ErrorDomain ‚ÑìB‚ÇÇ ‚Ñì‚â§B‚ÇÇ ‚Ñì‚âàB‚ÇÇ}
  {B‚ÇÉ : ErrorDomain ‚ÑìB‚ÇÉ ‚Ñì‚â§B‚ÇÉ ‚Ñì‚âàB‚ÇÉ} ‚Üí
  (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) ‚Üí
  (f : KlMorC B‚ÇÅ B‚ÇÇ) (g : KlMorC B‚ÇÇ B‚ÇÉ) ‚Üí
  A ‚ü∂K·¥ø (g ‚àòp f) ‚â° (A ‚ü∂K·¥ø g) ‚àòp (A ‚ü∂K·¥ø f)
KlArrowMorphism·¥ø-comp A f g =
  eqPBMor _ _ (funExt (Œª h ‚Üí eqPBMor _ _ (funExt (Œª x ‚Üí refl))))




-----------------------------------------------------------------
-- Action on squares

open F-rel

module KlArrowMorphism·¥∏-sq
  {A·µ¢  : PosetBisim  ‚ÑìA·µ¢  ‚Ñì‚â§A·µ¢  ‚Ñì‚âàA·µ¢}
  {A‚Çí  : PosetBisim  ‚ÑìA‚Çí  ‚Ñì‚â§A‚Çí  ‚Ñì‚âàA‚Çí}
  {A·µ¢' : PosetBisim  ‚ÑìA·µ¢' ‚Ñì‚â§A·µ¢' ‚Ñì‚âàA·µ¢'}
  {A‚Çí' : PosetBisim  ‚ÑìA‚Çí' ‚Ñì‚â§A‚Çí' ‚Ñì‚âàA‚Çí'}
  {B   : ErrorDomain ‚ÑìB  ‚Ñì‚â§B  ‚Ñì‚âàB}
  {B'  : ErrorDomain ‚ÑìB' ‚Ñì‚â§B' ‚Ñì‚âàB'}
  {c·µ¢  : PBRel A·µ¢ A·µ¢' ‚Ñìc·µ¢}
  {c‚Çí  : PBRel A‚Çí A‚Çí' ‚Ñìc‚Çí}
  (œï   : KlMorV A‚Çí  A·µ¢)
  (œï'  : KlMorV A‚Çí' A·µ¢')
  {d   : ErrorDomRel B B' ‚Ñìd}
  (Œ±   : ErrorDomSq (F-rel c‚Çí) (F-rel c·µ¢) œï œï')
  -- (Œ≤   : ErrorDomSq {!!} {!!} {!!} {!!})
  where
  
  open PBRel
  open ErrorDomRel hiding (module B ; module B')
  module B = ErrorDomainStr (B .snd)
  module B' = ErrorDomainStr (B' .snd)
  module c‚Çí = PBRel c‚Çí
  module d = ErrorDomRel d
  
  module ExtMon = ExtMonotone
    ‚ü® B ‚ü© ‚ü® B' ‚ü© (d.R)
    ‚ü® B ‚ü© (B.‚Ñß) (B.Œ∏.f)
    ‚ü® B' ‚ü© B'.‚Ñß B'.Œ∏.f
    (d.R) (d.R‚Ñß) (d.RŒ∏)
  -- (A : Type ‚ÑìA) (A' : Type ‚ÑìA') (_RAA'_ : A ‚Üí A' ‚Üí Type ‚ÑìRAA')
  -- (B  : Type ‚ÑìB)  (‚ÑßB  : B)  (Œ∏B  : (‚ñπ B) ‚Üí B)
  -- (B' : Type ‚ÑìB') (‚ÑßB' : B') (Œ∏B' : (‚ñπ B') ‚Üí B')
  -- (_RBB'_ : B ‚Üí B' ‚Üí Type ‚ÑìRBB')
  -- (R‚ÑßB‚ä• : ‚àÄ x ‚Üí ‚ÑßB RBB' x)
  -- (RŒ∏  : ‚àÄ (x~ : ‚ñπ B) (y~ : ‚ñπ B') ‚Üí
  --   ‚ñ∏ (Œª t ‚Üí (x~ t) RBB' (y~ t)) ‚Üí (Œ∏B x~) RBB' (Œ∏B' y~))

  module MapMon = MapMonotone
    ‚ü® A·µ¢ ‚ü© ‚ü® A·µ¢' ‚ü© ‚ü® B ‚ü© ‚ü® B' ‚ü© (c·µ¢ .R) (d .R)
  module LiftRel = LiftOrd ‚ü® A‚Çí ‚ü© ‚ü® A‚Çí' ‚ü© (c‚Çí.R)

--   {‚ÑìA·µ¢ ‚ÑìA·µ¢' ‚ÑìA‚Çí ‚ÑìA‚Çí' ‚ÑìR·µ¢ ‚ÑìR‚Çí : Level}
--   (A·µ¢ : Type ‚ÑìA·µ¢) (A·µ¢' : Type ‚ÑìA·µ¢')
--   (A‚Çí : Type ‚ÑìA‚Çí) (A‚Çí' : Type ‚ÑìA‚Çí')
--   (_R·µ¢_ : A·µ¢ ‚Üí A·µ¢' ‚Üí Type ‚ÑìR·µ¢)
--   (_R‚Çí_ : A‚Çí ‚Üí A‚Çí' ‚Üí Type ‚ÑìR‚Çí)


-- KlArrowMorphism·¥∏ {A·µ¢ = A·µ¢} {A‚Çí = A‚Çí} œï B =
--   Curry (With2nd UŒµ ‚àòp' Map' ‚àòp' With2nd (U-mor œï) ‚àòp' With2nd (Œ∑-mor))

-- NTS: U-rel (c‚Çí ‚ü∂rel d) .PBRel.R (KlArrowMorphism·¥∏ œï B .PBMor.f f)
--      (KlArrowMorphism·¥∏ œï' B' .PBMor.f g)

  Sq : PBSq (U-rel (c·µ¢ ‚ü∂rel d)) (U-rel (c‚Çí ‚ü∂rel d)) (œï ‚ü∂K·¥∏ B) (œï' ‚ü∂K·¥∏ B')
  Sq f g f‚â§g a‚Çí a‚Çí' H =
    ExtMon.ext-mon
      id id (ED-IdSqV d) _ _
      (MapMon.map-monotone
        (f .PBMor.f) (g .PBMor.f)
        f‚â§g
        (œï .ErrorDomMor.f .PBMor.f (Œ∑ a‚Çí))
        (œï' .ErrorDomMor.f .PBMor.f (Œ∑ a‚Çí'))
        (Œ± (Œ∑ a‚Çí) (Œ∑ a‚Çí') (LiftRel.Properties.Œ∑-monotone H)))
  

module KlArrowMorphism·¥ø-sq
  {A  : PosetBisim  ‚ÑìA  ‚Ñì‚â§A  ‚Ñì‚âàA}
  {A'  : PosetBisim  ‚ÑìA'  ‚Ñì‚â§A'  ‚Ñì‚âàA'}
  {B·µ¢  : ErrorDomain  ‚ÑìB·µ¢  ‚Ñì‚â§B·µ¢  ‚Ñì‚âàB·µ¢}
  {B‚Çí  : ErrorDomain  ‚ÑìB‚Çí  ‚Ñì‚â§B‚Çí  ‚Ñì‚âàB‚Çí}
  {B·µ¢' : ErrorDomain  ‚ÑìB·µ¢' ‚Ñì‚â§B·µ¢' ‚Ñì‚âàB·µ¢'}
  {B‚Çí' : ErrorDomain  ‚ÑìB‚Çí' ‚Ñì‚â§B‚Çí' ‚Ñì‚âàB‚Çí'}
  (c : PBRel A A' ‚Ñìc)
  {d·µ¢  : ErrorDomRel B·µ¢ B·µ¢' ‚Ñìd·µ¢}
  {d‚Çí  : ErrorDomRel B‚Çí B‚Çí' ‚Ñìd‚Çí}
  {f   : KlMorC B·µ¢  B‚Çí}
  {g   : KlMorC B·µ¢' B‚Çí'}
  (Œ±   : PBSq (U-rel d·µ¢) (U-rel d‚Çí) f g)
  -- (Œ≤   : PBSq c c Id Id)
  where

  Sq : PBSq (U-rel (c ‚ü∂rel d·µ¢)) (U-rel (c ‚ü∂rel d‚Çí)) (A ‚ü∂K·¥ø f) (A' ‚ü∂K·¥ø g)
  Sq h‚ÇÅ h‚ÇÇ h‚ÇÅ‚â§h‚ÇÇ a a' caa' =
    Œ± (h‚ÇÅ .PBMor.f a) (h‚ÇÇ .PBMor.f a') (h‚ÇÅ‚â§h‚ÇÇ a a' caa')


{-
PBRel.R (d‚Çí .UR)
  (PBMor.f f (PBMor.f h‚ÇÅ a))
  (PBMor.f g (PBMor.f h‚ÇÇ a'))
-}

-------------------------------
-- The Kleisli product functor
-------------------------------

open ExtAsEDMorphism
open StrongExtCombinator

_√ókob_ : (A‚ÇÅ : PosetBisim ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ) (A‚ÇÇ : PosetBisim ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ) ‚Üí
  PosetBisim (‚Ñì-max ‚ÑìA‚ÇÅ ‚ÑìA‚ÇÇ) (‚Ñì-max ‚Ñì‚â§A‚ÇÅ ‚Ñì‚â§A‚ÇÇ) (‚Ñì-max ‚Ñì‚âàA‚ÇÅ ‚Ñì‚âàA‚ÇÇ)
A‚ÇÅ √ókob A‚ÇÇ = A‚ÇÅ √ódp A‚ÇÇ


KlProdMorphism·¥∏ :
    {A‚ÇÅ : PosetBisim ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ} {A‚ÇÅ' : PosetBisim ‚ÑìA‚ÇÅ' ‚Ñì‚â§A‚ÇÅ' ‚Ñì‚âàA‚ÇÅ'}
    (œï : KlMorV A‚ÇÅ A‚ÇÅ') (A‚ÇÇ : PosetBisim ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ) ‚Üí
    KlMorV (A‚ÇÅ √ókob A‚ÇÇ) (A‚ÇÅ' √ókob A‚ÇÇ)
KlProdMorphism·¥∏ {A‚ÇÅ = A‚ÇÅ} {A‚ÇÅ' = A‚ÇÅ'} œï A‚ÇÇ = Ext (pt2 ‚àòp pt1)
  where
    pt1 : PBMor (A‚ÇÅ √ódp A‚ÇÇ) ((U-ob (F-ob A‚ÇÅ')) √ódp A‚ÇÇ)
    pt1 = (U-mor œï ‚àòp Œ∑-mor) √ómor Id

    pt2 : PBMor ((U-ob (F-ob A‚ÇÅ')) √ódp A‚ÇÇ) (U-ob (F-ob (A‚ÇÅ' √ódp A‚ÇÇ)))
    pt2 = (Uncurry (StrongExt .f (Curry (Œ∑-mor ‚àòp SwapPair)))) ‚àòp SwapPair

  -- (U-mor (Ext (? √ómor ?))) ‚àòp (U-mor œï) ‚àòp Œ∑-mor

_√óK·¥∏_ = KlArrowMorphism·¥∏

test : {A‚ÇÅ : Type ‚ÑìA‚ÇÅ} {A‚ÇÅ' : Type ‚ÑìA‚ÇÅ'} ‚Üí
    (œï : (L‚Ñß A‚ÇÅ ‚Üí L‚Ñß A‚ÇÅ')) (A‚ÇÇ : Type ‚ÑìA‚ÇÇ) ‚Üí
    L‚Ñß (A‚ÇÅ √ó A‚ÇÇ) ‚Üí L‚Ñß (A‚ÇÅ' √ó A‚ÇÇ)
test œï A‚ÇÇ lp =
  ext _ _ ‚Ñß Œ∏
    (Œª { (x , y) ‚Üí
      ext _ _ ‚Ñß Œ∏ (Œª x' ‚Üí Œ∑ (x' , y))
                  (œï (Œ∑ x))})
    lp
  where open CBPVExt


KlProdMorphism·¥ø :
    {A‚ÇÇ : PosetBisim ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ} {A‚ÇÇ' : PosetBisim ‚ÑìA‚ÇÇ' ‚Ñì‚â§A‚ÇÇ' ‚Ñì‚âàA‚ÇÇ'}
    (A‚ÇÅ : PosetBisim ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ) (œï : KlMorV A‚ÇÇ A‚ÇÇ') ‚Üí
    KlMorV (A‚ÇÅ √ókob A‚ÇÇ) (A‚ÇÅ √ókob A‚ÇÇ')
KlProdMorphism·¥ø {A‚ÇÇ = A‚ÇÇ} {A‚ÇÇ' = A‚ÇÇ'} A‚ÇÅ œï = Ext (pt2 ‚àòp pt1)
  where
    pt1 : PBMor (A‚ÇÅ √ódp A‚ÇÇ) (A‚ÇÅ √ódp (U-ob (F-ob A‚ÇÇ')))
    pt1 = Id √ómor (U-mor œï ‚àòp Œ∑-mor)

    pt2 : PBMor (A‚ÇÅ √ódp (U-ob (F-ob A‚ÇÇ'))) (U-ob (F-ob (A‚ÇÅ √ódp A‚ÇÇ')))
    pt2 = Uncurry (StrongExt .f (Curry Œ∑-mor))

_√óK·¥ø_ = KlArrowMorphism·¥ø


-- Separate functoriality
--
-- Not needed as of now.



-- Action on squares

