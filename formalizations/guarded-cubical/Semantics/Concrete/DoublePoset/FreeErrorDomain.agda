{-# OPTIONS --rewriting --guarded #-}

 -- to allow opening this module in other files while there are still holes
{-# OPTIONS --allow-unsolved-metas #-}

open import Common.Later

module Semantics.Concrete.DoublePoset.FreeErrorDomain (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Sigma
open import Cubical.Data.Nat hiding (_^_)
open import Cubical.Relation.Binary.Base
open import Cubical.Foundations.Structure


open import Common.Common
open import Semantics.Concrete.GuardedLiftError k
open import Semantics.Concrete.DoublePoset.Base
open import Semantics.Concrete.DoublePoset.Morphism
open import Semantics.Concrete.DoublePoset.DPMorRelation
open import Semantics.Concrete.DoublePoset.DblPosetCombinators

open import Semantics.Concrete.DoublePoset.ErrorDomain k

open import Semantics.Concrete.LockStepErrorOrdering k
open import Semantics.Concrete.WeakBisimilarity k

private
  variable
    ‚Ñì ‚Ñì' : Level
    ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA : Level
    ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB : Level
    

private
  ‚ñπ_ : Type ‚Ñì ‚Üí Type ‚Ñì
  ‚ñπ_ A = ‚ñπ_,_ k A



-- Give an error domain sturcture on L‚Ñß X

open ErrorDomainStr hiding (‚Ñß ; Œ∏)
open PosetBisimStr



module LiftPredomain (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) where

  module A = PosetBisimStr (A .snd)
  module LockStep = LiftOrdHomogenous ‚ü® A ‚ü© (A._‚â§_)
  _‚â§LA_ = LockStep._‚äë_

  ùïÉ : PosetBisim ‚ÑìA (‚Ñì-max ‚ÑìA ‚Ñì‚â§A) {!!}
  ùïÉ .fst = L‚Ñß ‚ü® A ‚ü©
  ùïÉ .snd = posetbisimstr (isSetL‚Ñß _ A.is-set) _‚â§LA_ {!!} {!!} {!!}


module Free (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) where

  module A = PosetBisimStr (A .snd)
  module LockStepA = LiftOrdHomogenous ‚ü® A ‚ü© (A._‚â§_)

  F-ob :  ErrorDomain ‚ÑìA {!!} {!!}
  F-ob .fst = L‚Ñß ‚ü® A ‚ü©
  F-ob .snd .is-predomain = {!!}
  F-ob .snd .ErrorDomainStr.‚Ñß = ‚Ñß
  F-ob .snd .ErrorDomainStr.Œ∏ =
    record { f = Œ∏ ; isMon = {!!} ; pres‚âà = {!!} }


-- Defining the "call-by-push-value ext" of type (A ‚Üí U B) ‚Üí (F A -* B).
-- This is not the same as the "Kleisli extension" (A ‚Üí U F A') ‚Üí (F A -* F A'), because there B has the form F A'
module CBPVMonad (A : PosetBisim ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA) (B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB) where

  module A = PosetBisimStr (A .snd)
  module B = ErrorDomainStr (B .snd)

  module LockStep = LiftOrdHomogenous ‚ü® A ‚ü© (A._‚â§_)

  _‚â§LA_ : _
  _‚â§LA_ = LockStep._‚äë_

  open LiftPredomain

  module _ (f : ‚ü® A ‚ü© ‚Üí ‚ü® B ‚ü©) where

    ext' : ‚ñπ (L‚Ñß ‚ü® A ‚ü© ‚Üí ‚ü® B ‚ü©) ‚Üí L‚Ñß ‚ü® A ‚ü© ‚Üí ‚ü® B ‚ü©
    ext' rec (Œ∑ x) = f x
    ext' rec ‚Ñß = B.‚Ñß
    ext' rec (Œ∏ lx~) = B.Œ∏ $ (Œª t ‚Üí rec t (lx~ t))

    ext : _
    ext = fix ext'

    ext-mon : monotone {X = ùïÉ A} {Y = ErrorDomain‚ÜíPredomain B} ext
    ext-mon = Œª x‚ÇÅ ‚Üí {!!}


-- Action of F on vertical morphisms

-- Given: f : A·µ¢ ‚Üí A‚Çí morphism
-- Define : F f: F A·µ¢ -o F A‚Çí
-- Given by applying the map function on L‚Ñß
-- NTS: map is a morphism of error domains (monotone pres‚âà, pres‚Ñß, presŒ∏)
-- Recall that map is defined using ext (hard to show that ext pres ‚âà)


-- Action of F on horizontal morphisms




-- Action of F on squares
