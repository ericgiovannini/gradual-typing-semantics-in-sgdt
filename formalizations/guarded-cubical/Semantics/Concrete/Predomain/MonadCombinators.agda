{-# OPTIONS --rewriting --guarded #-}

 -- to allow opening this module in other files while there are still holes
{-# OPTIONS --allow-unsolved-metas #-}

{-# OPTIONS --lossy-unification #-}


open import Common.Later

module Semantics.Concrete.Predomain.MonadCombinators (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Sigma
open import Cubical.Data.Unit
open import Cubical.Foundations.Structure

open import Common.Common
-- open import Semantics.Concrete.GuardedLift k renaming (Œ∑ to LŒ∑ ; Œ∏ to LŒ∏)
open import Semantics.Concrete.GuardedLiftError k
open import Semantics.Concrete.Predomain.Base
open import Semantics.Concrete.Predomain.Morphism
open import Semantics.Concrete.Predomain.Relation
open import Semantics.Concrete.Predomain.Square
open import Semantics.Concrete.Predomain.Constructions
open import Semantics.Concrete.Predomain.Combinators


open import Semantics.Concrete.LockStepErrorOrdering k
open import Semantics.Concrete.WeakBisimilarity k

open import Semantics.Concrete.Predomain.ErrorDomain k
open import Semantics.Concrete.Predomain.FreeErrorDomain k
open import Semantics.Concrete.Predomain.Error
open import Semantics.Concrete.Predomain.Monad k
open import Semantics.Concrete.Predomain.MonadRelationalResults k



private
  variable
    ‚Ñì ‚Ñì' : Level
    ‚ÑìA  ‚Ñì‚â§A  ‚Ñì‚âàA  : Level
    ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA' : Level
    ‚ÑìB  ‚Ñì‚â§B  ‚Ñì‚âàB  : Level
    ‚ÑìB' ‚Ñì‚â§B' ‚Ñì‚âàB' : Level
    ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ : Level
    ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ : Level
    ‚ÑìA‚ÇÉ ‚Ñì‚â§A‚ÇÉ ‚Ñì‚âàA‚ÇÉ : Level
    ‚ÑìŒì ‚Ñì‚â§Œì ‚Ñì‚âàŒì : Level
    ‚ÑìŒì' ‚Ñì‚â§Œì' ‚Ñì‚âàŒì' : Level
    ‚ÑìC : Level
    ‚Ñìc ‚Ñìc' ‚Ñìd ‚ÑìR : Level
    ‚ÑìA·µ¢  ‚Ñì‚â§A·µ¢  ‚Ñì‚âàA·µ¢  : Level
    ‚ÑìA·µ¢' ‚Ñì‚â§A·µ¢' ‚Ñì‚âàA·µ¢' : Level
    ‚ÑìA‚Çí  ‚Ñì‚â§A‚Çí  ‚Ñì‚âàA‚Çí  : Level
    ‚ÑìA‚Çí' ‚Ñì‚â§A‚Çí' ‚Ñì‚âàA‚Çí' : Level
    ‚Ñìc·µ¢ ‚Ñìc‚Çí : Level
    ‚ÑìcŒì ‚ÑìcŒì·µ¢ ‚ÑìcŒì‚Çí : Level
    ‚ÑìŒì·µ¢ ‚Ñì‚â§Œì·µ¢ ‚Ñì‚âàŒì·µ¢ : Level
    ‚ÑìŒì·µ¢' ‚Ñì‚â§Œì·µ¢' ‚Ñì‚âàŒì·µ¢' : Level
    ‚ÑìŒì‚Çí ‚Ñì‚â§Œì‚Çí ‚Ñì‚âàŒì‚Çí : Level
    ‚ÑìŒì‚Çí' ‚Ñì‚â§Œì‚Çí' ‚Ñì‚âàŒì‚Çí' : Level
    ‚ÑìB·µ¢ ‚Ñì‚â§B·µ¢ ‚Ñì‚âàB·µ¢ : Level
    ‚ÑìB·µ¢' ‚Ñì‚â§B·µ¢' ‚Ñì‚âàB·µ¢' : Level    
    ‚ÑìB‚Çí ‚Ñì‚â§B‚Çí ‚Ñì‚âàB‚Çí : Level
    ‚ÑìB‚Çí' ‚Ñì‚â§B‚Çí' ‚Ñì‚âàB‚Çí' : Level
    
   

private
  ‚ñπ_ : Type ‚Ñì ‚Üí Type ‚Ñì
  ‚ñπ_ A = ‚ñπ_,_ k A


open PMor
open LiftPredomain
open F-ob
open ErrorDomMor



module StrongExtCombinator
  {Œì : Predomain ‚ÑìŒì ‚Ñì‚â§Œì ‚Ñì‚âàŒì}
  {A : Predomain ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA}
  {B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB} where

  private
    module Œì = PredomainStr (Œì .snd)
    module A = PredomainStr (A .snd)
    module B = ErrorDomainStr (B .snd)
  open StrongCBPVExt ‚ü® Œì ‚ü© ‚ü® A ‚ü© ‚ü® B ‚ü© B.‚Ñß B.Œ∏.f
  module LA = LiftOrdHomogenous ‚ü® A ‚ü© A._‚â§_
  LA-refl = LA.Properties.‚äë-refl A.is-refl
  
  open StrongExtMonotone
    ‚ü® Œì ‚ü© ‚ü® Œì ‚ü© Œì._‚â§_
    ‚ü® A ‚ü© ‚ü® A ‚ü© A._‚â§_
    ‚ü® B ‚ü© B.‚Ñß B.Œ∏.f
    ‚ü® B ‚ü© B.‚Ñß B.Œ∏.f
    B._‚â§_ B.‚Ñß‚ä• (Œª x~ y~ ‚Üí B.Œ∏ .isMon)

  open StrongExtPresBisim
    ‚ü® Œì ‚ü© Œì._‚âà_
    ‚ü® A ‚ü© A._‚âà_
    ‚ü® B ‚ü© B.‚Ñß B.Œ∏.f
    B._‚âà_
    B.is-prop-valued-Bisim
    B.is-refl-Bisim
    B.is-sym
    (Œª x~ y~ H~ ‚Üí B.Œ∏.pres‚âà H~)
    B.Œ¥‚âàid


  module ŒìAB = ErrorDomainStr ((Œì ‚ü∂ob (A ‚ü∂ob B)) .snd)

  aux2 : ‚ü® Œì ‚ü∂ob (A ‚ü∂ob B) ‚ü© ‚Üí ‚ü® Œì ‚ü© ‚Üí ‚ü® ùïÉ A ‚ü∂ob B ‚ü©
  aux2 g Œ≥ .f = ext (Œª Œ≥' ‚Üí g .f Œ≥' .f) Œ≥
  aux2 g Œ≥ .isMon =
    strong-ext-mon _ _ Œ≤ Œ≥ Œ≥ (Œì.is-refl Œ≥) _ _
    where
      Œ≤ : _
      Œ≤ Œ≥ Œ≥' Œ≥‚â§Œ≥' a a' a‚â§a' =
        ‚â§mon‚Üí‚â§mon-het (g $ Œ≥) (g $ Œ≥') (g .isMon Œ≥‚â§Œ≥') a a' a‚â§a' -- g .isMon Œ≥‚â§Œ≥'
  aux2 g Œ≥ .pres‚âà = strong-ext-pres‚âà _ _ Œ≤ Œ≥ Œ≥ (Œì.is-refl-Bisim Œ≥) _ _
    where
      Œ≤ : _
      Œ≤ Œ≥ Œ≥' Œ≥‚âàŒ≥' = g .pres‚âà Œ≥‚âàŒ≥'

  aux : ‚ü® Œì ‚ü∂ob (A ‚ü∂ob B) ‚ü© ‚Üí ‚ü® (Œì ‚ü∂ob (ùïÉ A ‚ü∂ob B)) ‚ü©
  aux g .f = aux2 g
  aux g .isMon {x = Œ≥} {y = Œ≥'} =
    Œª Œ≥‚â§Œ≥' lx ‚Üí strong-ext-mon _ _ Œ≤ Œ≥ Œ≥' Œ≥‚â§Œ≥' lx lx (LA-refl lx)
    where
      Œ≤ : _
      Œ≤ Œ≥ Œ≥' Œ≥‚â§Œ≥' a a' a‚â§a' =
        ‚â§mon‚Üí‚â§mon-het (g $ Œ≥) (g $ Œ≥') (g .isMon Œ≥‚â§Œ≥') a a' a‚â§a'
  aux g .pres‚âà = strong-ext-pres‚âà _ _ Œ≤ _ _
    where
      Œ≤ : _
      Œ≤ Œ≥ Œ≥' Œ≥‚âàŒ≥' = g .pres‚âà Œ≥‚âàŒ≥'
 
  StrongExt : PMor (U-ob (Œì ‚ü∂ob (A ‚ü∂ob B))) (U-ob ((Œì ‚ü∂ob (ùïÉ A ‚ü∂ob B))))
  StrongExt .PMor.f g = aux g
  StrongExt .isMon {x = g‚ÇÅ} {y = g‚ÇÇ} g‚ÇÅ‚â§g‚ÇÇ =
    Œª Œ≥ lx ‚Üí strong-ext-mon _ _ Œ± Œ≥ Œ≥ (Œì.is-refl Œ≥) lx lx (LA-refl lx)
    where
      Œ± : TwoCell Œì._‚â§_ (TwoCell A._‚â§_ B._‚â§_) _ _
      Œ± Œ≥ Œ≥' Œ≥‚â§Œ≥' a a' a‚â§a' =
        let g‚ÇÅŒ≥‚â§g‚ÇÇŒ≥' = Œª x ‚Üí U-ob (A ‚ü∂ob B) .snd .PredomainStr.is-trans (g‚ÇÅ .PMor.f Œ≥) (g‚ÇÇ .PMor.f Œ≥) (g‚ÇÇ .PMor.f Œ≥') (g‚ÇÅ‚â§g‚ÇÇ Œ≥) (g‚ÇÇ .PMor.isMon Œ≥‚â§Œ≥') x in
        ‚â§mon‚Üí‚â§mon-het (g‚ÇÅ $ Œ≥) (g‚ÇÇ $ Œ≥') g‚ÇÅŒ≥‚â§g‚ÇÇŒ≥' a a' a‚â§a' -- ‚â§mon‚Üí‚â§mon-het g‚ÇÅ g‚ÇÇ g‚ÇÅ‚â§g‚ÇÇ Œ≥ Œ≥' Œ≥‚â§Œ≥'
  StrongExt .pres‚âà {x = g} {y = h} = strong-ext-pres‚âà _ _
 
  -- Goal :              (a : A .fst) ‚Üí f (f g‚ÇÅ Œ≥) a B.‚â§ f (f g‚ÇÇ Œ≥') a
  -- Have:  (Œ≥ : Œì .fst) (a : A .fst) ‚Üí f (f g‚ÇÅ Œ≥) a B.‚â§ f (f g‚ÇÇ Œ≥) a

  -- Ext : ErrorDomMor (Œì ‚ü∂ob (A ‚ü∂ob B)) ((Œì ‚ü∂ob (ùïÉ A ‚ü∂ob B)))
  -- Ext .f‚Ñß = eqPMor _ _ (funExt (Œª Œ≥ ‚Üí eqPMor _ _ (funExt (Œª lx ‚Üí {!Equations.ext-‚Ñß ? ? ?!}))))
  -- Ext .fŒ∏ = {!!}

  -- This is *not* a morphism of error domains, becasue it does not
  -- preserve error:
  --
  -- For that, we would need to have
  --   ext (Œª Œ≥' x ‚Üí B.‚Ñß) Œ≥ lx ‚â° B.‚Ñß
  -- But lx may be a Œ∏, in which case the LHS will be B.Œ∏(...)

  -- PMor (Œì √ódp A) B ‚Üí PMor (Œì √ódp ùïÉ A) B


module ExtCombinator
  {A : Predomain ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA}
  {B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB} where

  module A = PredomainStr (A .snd)
  module B = ErrorDomainStr (B .snd)

  open StrongExtCombinator {Œì = UnitP} {A = A} {B = B}

  Ext : PMor (U-ob (A ‚ü∂ob B)) (U-ob (ùïÉ A ‚ü∂ob B))
  Ext = from ‚àòp StrongExt ‚àòp to
    where
      to : PMor (U-ob (A ‚ü∂ob B)) (U-ob (UnitP ‚ü∂ob (A ‚ü∂ob B)))
      to = Curry œÄ1

      from : PMor (U-ob (UnitP ‚ü∂ob (ùïÉ A ‚ü∂ob B))) (U-ob (ùïÉ A ‚ü∂ob B))
      from = ((PairFun UnitP! Id) ~-> Id) ‚àòp Uncurry'

module MapCombinator
  {A·µ¢ : Predomain ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢ ‚Ñì‚âàA·µ¢}
  {A‚Çí : Predomain ‚ÑìA‚Çí ‚Ñì‚â§A‚Çí ‚Ñì‚âàA‚Çí} where

  open ExtCombinator {A = A·µ¢} {B = F-ob A‚Çí}

  Map : PMor (A·µ¢ ==> A‚Çí) (ùïÉ A·µ¢ ==> ùïÉ A‚Çí)
  Map = Ext ‚àòp (Id ~-> Œ∑-mor)


module _ {A : Predomain ‚ÑìA·µ¢ ‚Ñì‚â§A·µ¢ ‚Ñì‚âàA·µ¢} where

  open F-ob
  open ErrorDomainStr (F-ob A .snd) using (Œ¥‚âàid) -- brings in Œ¥‚âàid for L‚Ñß A
  
  open ExtAsEDMorphism {A = A} {B = F-ob A} using () renaming (Ext to Ext-ErrorDom)
  open ExtCombinator {A = A} {B = F-ob A} renaming (Ext to ExtCombinator)
  open CBPVExt ‚ü® A ‚ü© (L‚Ñß ‚ü® A ‚ü©) ‚Ñß Œ∏
  open MonadLaws.Unit-Right ‚ü® A ‚ü©

  Œ¥* : ErrorDomMor (F-ob A) (F-ob A)
  Œ¥* = Ext-ErrorDom (Œ¥-mor ‚àòp Œ∑-mor)

  Œ¥*‚âàid : (U-mor Œ¥*) ‚âàmon Id
  Œ¥*‚âàid = transport (Œª i ‚Üí (U-mor Œ¥*) ‚âàmon (lem3 i)) lem2

    where
      lem1 : _‚âàmon_ {X = A} {Y = ùïÉ A} (Œ¥-mor ‚àòp Œ∑-mor) (Id ‚àòp Œ∑-mor)
      lem1 = ‚âàmon-comp
        {f = Œ∑-mor} {g = Œ∑-mor} {f' = Œ¥-mor} {g' = Id}
        (‚âàmon-refl Œ∑-mor) Œ¥‚âàid

      lem2 : (U-mor Œ¥*) ‚âàmon (U-mor (Ext-ErrorDom (Id ‚àòp Œ∑-mor)))
      lem2 = ExtCombinator .pres‚âà {x = Œ¥-mor ‚àòp Œ∑-mor} {y = Œ∑-mor} lem1

      lem3 : (U-mor (Ext-ErrorDom (Id ‚àòp Œ∑-mor))) ‚â° Id
      lem3 = eqPMor _ _ (funExt (Œª lx ‚Üí monad-unit-right lx))

  -- NTS : (U Œ¥*) ‚âàmon Id
  -- We have Œ¥* = ext (Œ¥ ‚àò Œ∑) and Id = ext (Id ‚àò Œ∑)
  -- Since ext preserves bisimilarity, it suffices to show that Œ¥ ‚àò Œ∑ ‚âà Id ‚àò Œ∑,
  -- where Œ¥ = Œ∏ ‚àò next : UFA ‚Üí UFA.
  -- Since Œ¥ ‚âà Id and Œ∑ ‚âà Œ∑, the result follows by the fact that composition
  -- preserves bisimilarity.



Œ¥*Sq : {A : Predomain ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA} {A' : Predomain ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA'}
  (c : PRel A A' ‚Ñìc) ‚Üí ErrorDomSq (F-rel.F-rel c) (F-rel.F-rel c) Œ¥* Œ¥*
Œ¥*Sq {A = A} {A' = A'} c =
  Ext-sq c (F-rel.F-rel c) (Œ¥-mor ‚àòp Œ∑-mor) (Œ¥-mor ‚àòp Œ∑-mor)
  (CompSqV
    {c‚ÇÅ = c} {c‚ÇÇ = U-rel (F-rel.F-rel c)} {c‚ÇÉ = U-rel (F-rel.F-rel c)}
    (Œ∑-sq c) (Œ¥B-sq (F-rel.F-rel c)))

{-
ext-mon _ _ (Œª a a' caa' ‚Üí
  -- Lc.Properties.Œ¥-monotone (Lc.Properties.Œ∑-monotone caa'))
  {!!} {!!})
  where
    open F-ob
    -- open F-rel c
    open F-rel
    
    open ExtMonotone ‚ü® A ‚ü© ‚ü® A' ‚ü© (c .PRel.R) (L‚Ñß ‚ü® A ‚ü©) ‚Ñß Œ∏ (L‚Ñß ‚ü® A' ‚ü©) ‚Ñß Œ∏ (F-rel c .ErrorDomRel.R)
      (F-rel c .ErrorDomRel.R‚Ñß) (F-rel c .ErrorDomRel.RŒ∏)
      -- (Lc.Properties.‚Ñß‚ä•) (Œª _ _ ‚Üí Lc.Properties.Œ∏-monotone)

-}

module _
  {Œì : Predomain ‚ÑìŒì ‚Ñì‚â§Œì ‚Ñì‚âàŒì}   {Œì' : Predomain ‚ÑìŒì' ‚Ñì‚â§Œì' ‚Ñì‚âàŒì'}
  {A : Predomain ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA}   {A' : Predomain ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA'}
  {B : ErrorDomain ‚ÑìB ‚Ñì‚â§B ‚Ñì‚âàB}  {B' : ErrorDomain ‚ÑìB' ‚Ñì‚â§B' ‚Ñì‚âàB'}
  (cŒì : PRel Œì Œì' ‚ÑìcŒì)
  (c : PRel A A' ‚Ñìc)
  (d : ErrorDomRel B B' ‚Ñìd)
  (f : U-ob (Œì  ‚ü∂ob (A  ‚ü∂ob B)) .fst)
  (g : U-ob (Œì' ‚ü∂ob (A' ‚ü∂ob B')) .fst)
  where
  open StrongExtCombinator

  private
    module B  = ErrorDomainStr (B .snd)
    module B' = ErrorDomainStr (B' .snd)

  open StrongExtMonotone
    ‚ü® Œì ‚ü© ‚ü® Œì' ‚ü© (cŒì .PRel.R)
    ‚ü® A ‚ü© ‚ü® A' ‚ü© (c .PRel.R)
    ‚ü® B ‚ü©  B.‚Ñß  B.Œ∏.f
    ‚ü® B' ‚ü© B'.‚Ñß B'.Œ∏.f
    (d .ErrorDomRel.R) (d .ErrorDomRel.R‚Ñß) (d .ErrorDomRel.RŒ∏)

  StrongExt-Sq :
    PSq cŒì (U-rel (c ‚ü∂rel d)) f g ‚Üí
    PSq cŒì (U-rel (U-rel (F-rel.F-rel c) ‚ü∂rel d)) (StrongExt .PMor.f f) (StrongExt .PMor.f g)
  StrongExt-Sq = strong-ext-mon (Œª Œ≥ ‚Üí f .PMor.f Œ≥ .PMor.f) (Œª Œ≥' ‚Üí g .PMor.f Œ≥' .PMor.f)
