{-# OPTIONS --rewriting --guarded #-}

{-# OPTIONS --allow-unsolved-metas #-}

open import Common.Later

module Semantics.Concrete.PosetWithPtb (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Structure
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Reflection.RecordEquiv
open import Cubical.Relation.Binary.Poset
open import Cubical.HITs.PropositionalTruncation
open import Cubical.HigherCategories.ThinDoubleCategory.ThinDoubleCat
-- open import Cubical.HigherCategories.ThinDoubleCategory.Constructions.BinProduct
open import Cubical.Foundations.Function

open import Cubical.Algebra.Monoid.Base
open import Cubical.Algebra.Semigroup.Base

open import Cubical.Data.Sigma
open import Cubical.Data.Nat renaming (‚Ñï to Nat) hiding (_¬∑_ ; _^_)

open import Cubical.Categories.Category.Base

open import Common.Common

open import Semantics.Lift k
open import Semantics.LockStepErrorOrdering k
open import Semantics.Concrete.DynNew k
open import Common.Poset.Convenience
open import Common.Poset.Constructions
open import Common.Poset.Monotone
open import Common.Poset.MonotoneRelation
open import Semantics.MonotoneCombinators


-- open import Semantics.Abstract.Model.Model


-- open Model

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level
  ‚ñπ_ : Type ‚Ñì -> Type ‚Ñì
  ‚ñπ A = ‚ñπ_,_ k A

isSetMonoid : (M : Monoid ‚Ñì) -> isSet ‚ü® M ‚ü©
isSetMonoid M = M .snd .isMonoid .isSemigroup .is-set
  where
    open MonoidStr
    open IsMonoid
    open IsSemigroup



monoidId : (M : Monoid ‚Ñì) -> ‚ü® M ‚ü©
monoidId M = M .snd .Œµ
  where open MonoidStr

_√óM_ : Monoid ‚Ñì -> Monoid ‚Ñì' -> Monoid (‚Ñì-max ‚Ñì ‚Ñì')
M1 √óM M2 = makeMonoid
  {M = ‚ü® M1 ‚ü© √ó ‚ü® M2 ‚ü©}
  (monoidId M1 , monoidId M2)
  (Œª { (m1 , m2) (m1' , m2') -> (m1 ¬∑M1 m1') , (m2 ¬∑M2 m2') })
  (isSet√ó (isSetMonoid M1) (isSetMonoid M2))
  (Œª { (m1 , m2) (m1' , m2') (m1'' , m2'') ‚Üí
    ‚â°-√ó (M1 .snd .isMonoid .isSemigroup .¬∑Assoc m1 m1' m1'') ((M2 .snd .isMonoid .isSemigroup .¬∑Assoc m2 m2' m2'')) })
  (Œª { (m1 , m2) -> ‚â°-√ó (M1 .snd .isMonoid .¬∑IdR m1) ((M2 .snd .isMonoid .¬∑IdR m2)) })
  (Œª { (m1 , m2) -> ‚â°-√ó (M1 .snd .isMonoid .¬∑IdL m1) ((M2 .snd .isMonoid .¬∑IdL m2)) })
   where
     open MonoidStr
     open IsMonoid
     open IsSemigroup
     _¬∑M1_ = M1 .snd ._¬∑_
     _¬∑M2_ = M2 .snd ._¬∑_

-- Monoid of all monotone endofunctions on a poset
EndoMonFun : (X : Poset ‚Ñì ‚Ñì') -> Monoid (‚Ñì-max ‚Ñì ‚Ñì')
EndoMonFun X = makeMonoid {M = MonFun X X} Id mCompU MonFunIsSet
  (Œª f g h -> eqMon _ _ refl) (Œª f -> eqMon _ _ refl) (Œª f -> eqMon _ _ refl)

--
-- A poset along with a monoid of monotone perturbation functions
--
record PosetWithPtb (‚Ñì ‚Ñì' ‚Ñì'' : Level) : Type (‚Ñì-max (‚Ñì-suc ‚Ñì) (‚Ñì-max (‚Ñì-suc ‚Ñì') (‚Ñì-suc ‚Ñì''))) where
  field
    P       : Poset ‚Ñì ‚Ñì'
    Perturb : Monoid ‚Ñì''
    perturb : MonoidHom Perturb (EndoMonFun P)
    --TODO: needs to be injective map
    -- Perturb : ‚ü® EndoMonFun P ‚ü©

  ptb-fun : ‚ü® Perturb ‚ü© -> ‚ü® EndoMonFun P ‚ü©
  ptb-fun = perturb .fst

open PosetWithPtb



_==>PWP_ : PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'' -> PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'' -> PosetWithPtb (‚Ñì-max ‚Ñì ‚Ñì') (‚Ñì-max ‚Ñì ‚Ñì') ‚Ñì''
A ==>PWP B = record {
  P = (A .P) ==> (B .P) ;
  Perturb = A .Perturb √óM B .Perturb ;
  perturb =
    (Œª { (Œ¥·¥¨ , Œ¥·¥Æ) -> ptb-fun A Œ¥·¥¨ ~-> ptb-fun B Œ¥·¥Æ }) ,
    monoidequiv (eqMon _ _ (funExt (Œª g -> let pfA = cong (MonFun.f) (perturb A .snd .presŒµ) in
                                           let pfB = cong (MonFun.f) (perturb B .snd .presŒµ) in
                                           eqMon _ _ Œª i -> pfB i ‚àò MonFun.f g ‚àò pfA i)))
                (Œª ma mb ‚Üí {!!}) }
    where
      open IsMonoidHom


-- Monoid of natural numbers with addition
nat-monoid : Monoid ‚Ñì-zero
nat-monoid = makeMonoid {M = Nat} zero _+_ isSet‚Ñï +-assoc +-zero (Œª x -> refl)

open ClockedCombinators k

ùïÉPWP : PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'' -> PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì''
ùïÉPWP A = record {
  P = LiftPoset.ùïÉ (A .P) ;
  Perturb = nat-monoid √óM A .Perturb ;
  perturb =
    (Œª ma ‚Üí fix f' ma) ,
    monoidequiv (eqMon (ptb-fun {!!} {!!}) MonId {!refl!}) {!!} }
    where
      MA = nat-monoid √óM A .Perturb
      open LiftPoset
      f' : ‚ñπ (‚ü® MA ‚ü© -> MonFun (ùïÉ (A .P)) (ùïÉ (A .P))) ->
             (‚ü® MA ‚ü© -> MonFun (ùïÉ (A .P)) (ùïÉ (A .P)))
      f' rec (n , ma) = record {
        f = Œª { (Œ∑ a) -> (Œ¥ ^ n) (Œ∑ (MonFun.f (ptb-fun A ma) a)) ;
                 ‚Ñß -> (Œ¥ ^ n) ‚Ñß ;
                (Œ∏ la~) -> Œ∏ (Œª t -> MonFun.f (rec t ((n , ma))) (la~ t))} ;
        isMon = Œª x ‚Üí {!!} }



--MonFun A A' -> MonFun B B' -> MonFun (A √ó B) (A'√ó B')
_√óPWP_ : PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'' -> PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'' -> PosetWithPtb ‚Ñì (‚Ñì-max ‚Ñì' ‚Ñì') ‚Ñì''
A √óPWP B = record {
  P = (A .P) √óp (B .P) ;
  Perturb = A .Perturb √óM B .Perturb ;
  perturb =
    (Œª { (ma , mb) -> PairFun (mCompU (ptb-fun A ma) œÄ1) (mCompU (ptb-fun B mb) œÄ2) }),
    monoidequiv
      (eqMon (PairFun
      (mCompU (perturb A .fst (A .Perturb .snd .MonoidStr.Œµ)) œÄ1)
      (mCompU (perturb B .fst (B .Perturb .snd .MonoidStr.Œµ)) œÄ2)) Id (funExt (Œª { (a , b) ‚Üí
        ‚â°-√ó (funExt‚Åª (cong MonFun.f (perturb A .snd .presŒµ)) a)
             (funExt‚Åª (cong MonFun.f (perturb B .snd .presŒµ)) b) })))
     Œª { (ma , mb) (ma' , mb') ‚Üí
       eqMon _ _
             (funExt (Œª { (a , b ) -> ‚â°-√ó (funExt‚Åª (cong MonFun.f (perturb A .snd .pres¬∑ ma ma')) a)
                                           (funExt‚Åª (cong MonFun.f (perturb B .snd .pres¬∑ mb mb')) b) })) } -- Œª { (ma , mb) (ma' , mb') ‚Üí eqMon (ptb-fun {!? √óPWP ?!} {!!}) (mCompU (ptb-fun {!!} {!!}) (ptb-fun {!!} {!!})) {!!} }
  }
  where
    open MonoidStr
    open IsMonoidHom

{-
PairFun
      (mCompU (perturb A .fst (A .Perturb .snd ._¬∑_ ma ma')) œÄ1)
      (mCompU (perturb B .fst (B .Perturb .snd ._¬∑_ mb mb')) œÄ2)
      ‚â°
      mCompU
      (PairFun (mCompU (perturb A .fst ma) œÄ1)
       (mCompU (perturb B .fst mb) œÄ2))
      (PairFun (mCompU (perturb A .fst ma') œÄ1)
       (mCompU (perturb B .fst mb') œÄ2))
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-}


--
-- Monotone functions on Posets with Perturbations
--
PosetWithPtb-Vert : {‚Ñì ‚Ñì' ‚Ñì'' : Level} (P1 P2 : PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'') -> Type {!!} -- (‚Ñì-max ‚Ñì ‚Ñì')
PosetWithPtb-Vert P1 P2 = MonFun (P1 .P) (P2 .P)
-- TODO should there be a condition on preserving the perturbations?


--
-- Monotone relations on Posets with Perturbations
--

record FillersFor {‚Ñì ‚Ñì'  ‚Ñì'' ‚ÑìR : Level} (P1 P2 : PosetWithPtb ‚Ñì ‚Ñì' ‚Ñì'') (R : MonRel (P1 .P) (P2 .P) ‚ÑìR) :
  Type (‚Ñì-max (‚Ñì-max ‚Ñì ‚Ñì'') ‚ÑìR) where
  open PosetWithPtb
  field
    fillerL-e : ‚àÄ (Œ¥·¥Æ : ‚ü® P2 .Perturb ‚ü© ) ->
      Œ£[ Œ¥·¥¨ ‚àà ‚ü® P1 .Perturb ‚ü© ]
        TwoCell (R .MonRel.R) (R .MonRel.R)
              (MonFun.f (ptb-fun P1 Œ¥·¥¨)) (MonFun.f (ptb-fun P2 Œ¥·¥Æ))
    fillerL-p : ‚àÄ (Œ¥·¥∏·¥Æ : ‚ü® ùïÉPWP  P2 .Perturb ‚ü© ) ->
      Œ£[ Œ¥·¥∏·¥¨ ‚àà ‚ü® ùïÉPWP  P1 .Perturb ‚ü© ]
        TwoCell (LiftRelation._‚âæ_ ‚ü® P1 .P ‚ü© ‚ü® P2 .P ‚ü© (R .MonRel.R))
                (LiftRelation._‚âæ_ ‚ü® P1 .P ‚ü© ‚ü® P2 .P ‚ü© (R .MonRel.R))
             (MonFun.f (ptb-fun (ùïÉPWP P1) Œ¥·¥∏·¥¨)) (MonFun.f (ptb-fun (ùïÉPWP P2) Œ¥·¥∏·¥Æ))
    fillerR-e : ‚àÄ (Œ¥·¥¨ : ‚ü® P1 .Perturb ‚ü©) ->
      Œ£[ Œ¥·¥Æ ‚àà ‚ü® P2 .Perturb ‚ü© ]
        TwoCell (R .MonRel.R) (R .MonRel.R)
              (MonFun.f (ptb-fun P1 Œ¥·¥¨)) (MonFun.f (ptb-fun P2 Œ¥·¥Æ))
    fillerR-p : ‚àÄ (Œ¥·¥∏·¥¨ : ‚ü® ùïÉPWP P1 .Perturb ‚ü© ) ->
      Œ£[ Œ¥·¥∏·¥Æ ‚àà ‚ü® ùïÉPWP P2 .Perturb ‚ü© ]
        TwoCell (LiftRelation._‚âæ_ ‚ü® P1 .P ‚ü© ‚ü® P2 .P ‚ü© (R .MonRel.R)) 
                (LiftRelation._‚âæ_ ‚ü® P1 .P ‚ü© ‚ü® P2 .P ‚ü© (R .MonRel.R))
              (MonFun.f (ptb-fun (ùïÉPWP P1) Œ¥·¥∏·¥¨)) (MonFun.f (ptb-fun (ùïÉPWP P2) Œ¥·¥∏·¥Æ))


-- TODO: Show this is a set by showing that the Sigma type it is iso to
-- is a set (Œ£IsSet2ndProp)
unquoteDecl FillersForIsoŒ£ = declareRecordIsoŒ£ FillersForIsoŒ£ (quote (FillersFor))

FillersFor-Set : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì'' ‚ÑìR : Level} {P1 P2 : PosetWithPtb ‚Ñì ‚Ñì'  ‚Ñì''} {R : MonRel (P1 .P) (P2 .P) ‚ÑìR}->
  isSet (FillersFor P1 P2 R)
FillersFor-Set {P1 = P1} {P2 = P2} {R = R} =
                       isSetRetract (Iso.fun FillersForIsoŒ£) (Iso.inv FillersForIsoŒ£) (Iso.leftInv FillersForIsoŒ£) (
                           isSet√ó (isSetŒ† (Œª Œ¥·¥Æ ‚Üí isSetŒ£SndProp (isSetMonoid (P1 .Perturb)) Œª Œ¥·¥¨ ‚Üí isPropTwoCell (R .MonRel.is-prop-valued)))
                             (isSet√ó (isSetŒ† (Œª Œ¥·¥∏·¥Æ ‚Üí isSetŒ£SndProp (isSet√ó (isSetMonoid nat-monoid) (isSetMonoid (P1 .Perturb)))
                               Œª Œ¥·¥∏·¥¨ ‚Üí isPropTwoCell (LiftMonRel.‚Ñù (P1 .P) (P2 .P) R .MonRel.is-prop-valued)))
                                 (isSet√ó (isSetŒ† (Œª Œ¥·¥¨ ‚Üí isSetŒ£SndProp (isSetMonoid (P2 .Perturb)) (Œª Œ¥·¥Æ ‚Üí isPropTwoCell (R .MonRel.is-prop-valued))))
                                   (isSetŒ† (Œª Œ¥·¥∏·¥¨ ‚Üí isSetŒ£SndProp (isSet√ó (isSetMonoid nat-monoid) (isSetMonoid (P2 .Perturb)))
                                      (Œª Œ¥·¥∏·¥Æ ‚Üí isPropTwoCell (LiftMonRel.‚Ñù (P1 .P) (P2 .P) R .MonRel.is-prop-valued)))))))
-- isSetŒ£SndProp ? ?
-- isSet√ó (isSetŒ† ( Œª Œ¥·¥∏·¥Æ ‚Üí isSetŒ£SndProp (isSetŒ£ (isSetMonoid {!!}) Œª x ‚Üí {!!}) Œª Œ¥·¥∏·¥¨ ‚Üí isPropTwoCell {! R .MonRel.is-prop-valued!}))

