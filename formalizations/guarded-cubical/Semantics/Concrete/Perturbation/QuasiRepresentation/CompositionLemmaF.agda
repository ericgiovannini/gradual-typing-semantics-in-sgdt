{-# OPTIONS --rewriting --guarded #-}
{-# OPTIONS --lossy-unification #-}
{-# OPTIONS --allow-unsolved-metas #-}

open import Common.Later
module Semantics.Concrete.Perturbation.QuasiRepresentation.CompositionLemmaF (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Structure

open import Cubical.Algebra.Monoid.Base

open import Common.Common

open import Semantics.Concrete.Predomain.Morphism
open import Semantics.Concrete.Predomain.Relation as PRel
open import Semantics.Concrete.Predomain.Square
open import Semantics.Concrete.Predomain.ErrorDomain k
open import Semantics.Concrete.Predomain.FreeErrorDomain k

open import Semantics.Concrete.Types k as Types
open import Semantics.Concrete.Perturbation.Relation k
open import Semantics.Concrete.Perturbation.Relation.Constructions k as Rel
open import Semantics.Concrete.Perturbation.QuasiRepresentation k
open import Semantics.Concrete.Perturbation.QuasiRepresentation.Constructions k
open import Semantics.Concrete.Perturbation.QuasiRepresentation.Composition k
open import Semantics.Concrete.Perturbation.QuasiRepresentation.QuasiEquivalence k


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level
    ‚Ñì‚â§ ‚Ñì‚âà ‚ÑìM : Level
    ‚ÑìA ‚ÑìA' ‚Ñì‚â§A ‚Ñì‚â§A' ‚Ñì‚âàA ‚Ñì‚âàA' ‚ÑìMA ‚ÑìMA' : Level
    ‚ÑìB ‚ÑìB' ‚Ñì‚â§B ‚Ñì‚â§B' ‚Ñì‚âàB ‚Ñì‚âàB' ‚ÑìMB ‚ÑìMB' : Level
    ‚Ñìc ‚Ñìc' ‚Ñìd ‚Ñìd' : Level
  
    ‚ÑìA‚ÇÅ   ‚Ñì‚â§A‚ÇÅ   ‚Ñì‚âàA‚ÇÅ   : Level
    ‚ÑìA‚ÇÅ'  ‚Ñì‚â§A‚ÇÅ'  ‚Ñì‚âàA‚ÇÅ'  : Level
    ‚ÑìA‚ÇÇ   ‚Ñì‚â§A‚ÇÇ   ‚Ñì‚âàA‚ÇÇ   : Level
    ‚ÑìA‚ÇÇ'  ‚Ñì‚â§A‚ÇÇ'  ‚Ñì‚âàA‚ÇÇ'  : Level
    ‚ÑìA‚ÇÉ   ‚Ñì‚â§A‚ÇÉ   ‚Ñì‚âàA‚ÇÉ   : Level
    ‚ÑìA‚ÇÉ'  ‚Ñì‚â§A‚ÇÉ'  ‚Ñì‚âàA‚ÇÉ'  : Level

    ‚ÑìB‚ÇÅ   ‚Ñì‚â§B‚ÇÅ   ‚Ñì‚âàB‚ÇÅ   : Level
    ‚ÑìB‚ÇÅ'  ‚Ñì‚â§B‚ÇÅ'  ‚Ñì‚âàB‚ÇÅ'  : Level
    ‚ÑìB‚ÇÇ   ‚Ñì‚â§B‚ÇÇ   ‚Ñì‚âàB‚ÇÇ   : Level
    ‚ÑìB‚ÇÇ'  ‚Ñì‚â§B‚ÇÇ'  ‚Ñì‚âàB‚ÇÇ'  : Level
    ‚ÑìB‚ÇÉ   ‚Ñì‚â§B‚ÇÉ   ‚Ñì‚âàB‚ÇÉ   : Level
    ‚ÑìB‚ÇÉ'  ‚Ñì‚â§B‚ÇÉ'  ‚Ñì‚âàB‚ÇÉ'  : Level

    ‚ÑìMA‚ÇÅ ‚ÑìMA‚ÇÇ ‚ÑìMA‚ÇÉ : Level
    ‚ÑìMB‚ÇÅ ‚ÑìMB‚ÇÇ ‚ÑìMB‚ÇÉ : Level


open F-ob
open F-mor
open F-rel

module _
  {A‚ÇÅ : ValType ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ ‚ÑìMA‚ÇÅ}
  {A‚ÇÇ : ValType ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ ‚ÑìMA‚ÇÇ}
  {A‚ÇÉ : ValType ‚ÑìA‚ÇÉ ‚Ñì‚â§A‚ÇÉ ‚Ñì‚âàA‚ÇÉ ‚ÑìMA‚ÇÉ}
  (c  : VRelPP A‚ÇÅ A‚ÇÇ ‚Ñìc)
  (c' : VRelPP A‚ÇÇ A‚ÇÉ ‚Ñìc')
  where

  private
    MA‚ÇÅ = PtbV A‚ÇÅ
    MA‚ÇÇ = PtbV A‚ÇÇ
    MA‚ÇÉ = PtbV A‚ÇÉ
    module MA‚ÇÅ = MonoidStr (MA‚ÇÅ .snd)
    module MA‚ÇÉ = MonoidStr (MA‚ÇÉ .snd)

    MFA‚ÇÅ = PtbC (Types.F A‚ÇÅ)
    MFA‚ÇÉ = PtbC (Types.F A‚ÇÉ)
    module MFA‚ÇÅ = MonoidStr (MFA‚ÇÅ .snd)
    module MFA‚ÇÉ = MonoidStr (MFA‚ÇÉ .snd)
    
    iA‚ÇÅ : _ ‚Üí _
    iA‚ÇÅ = fst ‚àò interpV A‚ÇÅ .fst

    iA‚ÇÇ : _ ‚Üí _
    iA‚ÇÇ = fst ‚àò interpV A‚ÇÇ .fst

    iA‚ÇÉ : _ ‚Üí _
    iA‚ÇÉ = fst ‚àò interpV A‚ÇÉ .fst

    iFA‚ÇÅ : _ ‚Üí _
    iFA‚ÇÅ = fst ‚àò interpC (Types.F A‚ÇÅ) .fst

    iFA‚ÇÉ : _ ‚Üí _
    iFA‚ÇÉ = fst ‚àò interpC (Types.F A‚ÇÉ) .fst

    ùî∏‚ÇÅ = ValType‚ÜíPredomain A‚ÇÅ
    ùî∏‚ÇÇ = ValType‚ÜíPredomain A‚ÇÇ
    ùî∏‚ÇÉ = ValType‚ÜíPredomain A‚ÇÉ

    rA‚ÇÅ = idPRel ùî∏‚ÇÅ
    rA‚ÇÇ = idPRel ùî∏‚ÇÇ
    rA‚ÇÉ = idPRel ùî∏‚ÇÉ

    rFA‚ÇÅ = idEDRel (CompType‚ÜíErrorDomain (Types.F A‚ÇÅ))
    rFA‚ÇÉ = idEDRel (CompType‚ÜíErrorDomain (Types.F A‚ÇÉ))

    |c|  = VRelPP‚ÜíPredomainRel c
    |c'| = VRelPP‚ÜíPredomainRel c'

  -- If Fc and Fc' are quasi-right-representable, then F(cc') is
  -- quasi-right-representable.
  module _
    (œÅc   : LeftRepV A‚ÇÅ A‚ÇÇ |c|)
    (œÅc'  : LeftRepV A‚ÇÇ A‚ÇÉ |c'|)
    (œÅFc  : RightRepC (Types.F A‚ÇÅ) (Types.F A‚ÇÇ) (F-rel |c|))
    (œÅFc' : RightRepC (Types.F A‚ÇÇ) (Types.F A‚ÇÉ) (F-rel |c'|))
    where

    repFcFc'‚ÜírepFcc' :
      RightRepC (Types.F A‚ÇÅ) (Types.F A‚ÇÉ) (F-rel (|c| PRel.‚äô |c'|))
    repFcFc'‚ÜírepFcc' = mkRightRepC (Types.F A‚ÇÅ) (Types.F A‚ÇÉ) (F-rel (|c| ‚äô |c'|))
      pFcc' Œ¥lFcc' DnRFcc' Œ¥rFcc' DnLFcc'
      where

      Fcc' : ErrorDomRel _ _ _
      Fcc' = F-rel (|c| PRel.‚äô |c'|)

      -- Data corresponding to Fc
      pFc   = projC _ _ _ œÅFc
      Œ¥lFc  = Œ¥lpC  _ _ _ œÅFc
      Œ¥rFc  = Œ¥rpC  _ _ _ œÅFc
      DnRFc = DnRC  _ _ _ œÅFc
      DnLFc = DnLC  _ _ _ œÅFc

      -- Data corresponding to Fc'
      pFc'   = projC _ _ _ œÅFc'
      Œ¥lFc'  = Œ¥lpC  _ _ _ œÅFc'
      Œ¥rFc'  = Œ¥rpC  _ _ _ œÅFc'
      DnRFc' = DnRC  _ _ _ œÅFc'
      DnLFc' = DnLC  _ _ _ œÅFc'

      -- Data corresponding to FcFc'
      FcFc' : ErrorDomRel _ _ _
      FcFc' =  F-rel |c| ‚äôed F-rel |c'|

      œÅcomp-right : RightRepC (Types.F A‚ÇÅ) (Types.F A‚ÇÉ) FcFc'
      œÅcomp-right = RightRepC-Comp (Rel.F c) (Rel.F c') œÅFc œÅFc'

      pcomp   = projC _ _ _ œÅcomp-right
      Œ¥lcomp  = Œ¥lpC  _ _ _ œÅcomp-right
      Œ¥rcomp  = Œ¥rpC  _ _ _ œÅcomp-right
      DnRcomp = DnRC  _ _ _ œÅcomp-right
      DnLcomp = DnLC  _ _ _ œÅcomp-right
      

      -- Know: Fcc' and FcFc' have the same embedding, so are quasi-equivalent
      equiv : QuasiOrderEquivC (Types.F A‚ÇÅ) (Types.F A‚ÇÉ) Fcc' FcFc'
      equiv = eqEmb‚ÜíquasiEquivC _ _
        (F-leftRep A‚ÇÅ A‚ÇÉ (|c| ‚äô |c'|) (LeftRepV-Comp c c' œÅc œÅc'))
        (LeftRepC-Comp (Rel.F c) (Rel.F c') (F-leftRep A‚ÇÅ A‚ÇÇ |c| œÅc) (F-leftRep A‚ÇÇ A‚ÇÉ |c'| œÅc'))
        (F-mor-pres-comp _ _) -- apply functoriality of F

      module equiv = QuasiOrderEquivC equiv

      -- Data corresponding to F(cc')

      -- Note: It appears that we do not need to transport along the fact that
      -- iFA‚ÇÅ and iFA‚ÇÉ preserve composition, because they do so definitionally.

      pFcc' : ErrorDomMor (F-ob ùî∏‚ÇÉ) (F-ob ùî∏‚ÇÅ)
      pFcc' = (iFA‚ÇÅ equiv.Œ¥‚ÇÇ) ‚àòed pcomp ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ')

      Œ¥lFcc' : ‚ü® MFA‚ÇÅ ‚ü©
      Œ¥lFcc' = equiv.Œ¥‚ÇÇ MFA‚ÇÅ.¬∑ Œ¥lcomp MFA‚ÇÅ.¬∑ equiv.Œ¥‚ÇÅ

      DnRFcc' : ErrorDomSq Fcc' rFA‚ÇÅ (iFA‚ÇÅ Œ¥lFcc') pFcc'
      DnRFcc' = comp123
        where
          comp12 : ErrorDomSq Fcc' rFA‚ÇÅ ((iFA‚ÇÅ Œ¥lcomp) ‚àòed (iFA‚ÇÅ equiv.Œ¥‚ÇÅ)) (pcomp ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ'))
          comp12 = ED-CompSqV {d‚ÇÅ = Fcc'} {d‚ÇÇ = FcFc'} {d‚ÇÉ = rFA‚ÇÅ} {œï‚ÇÅ = iFA‚ÇÅ equiv.Œ¥‚ÇÅ} {œï‚ÇÅ' = iFA‚ÇÉ equiv.Œ¥‚ÇÅ'} {œï‚ÇÇ = iFA‚ÇÅ Œ¥lcomp} {œï‚ÇÇ' = pcomp}
            equiv.sq-d-d' DnRcomp

          comp123 : ErrorDomSq Fcc' rFA‚ÇÅ ((iFA‚ÇÅ equiv.Œ¥‚ÇÇ) ‚àòed (iFA‚ÇÅ Œ¥lcomp) ‚àòed (iFA‚ÇÅ equiv.Œ¥‚ÇÅ)) pFcc'
          comp123 = ED-CompSqV
            {d‚ÇÅ = Fcc'} {d‚ÇÇ = rFA‚ÇÅ} {d‚ÇÉ = rFA‚ÇÅ}
            {œï‚ÇÅ = (iFA‚ÇÅ Œ¥lcomp) ‚àòed (iFA‚ÇÅ equiv.Œ¥‚ÇÅ)} {œï‚ÇÅ' = pcomp ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ')}
            {œï‚ÇÇ = iFA‚ÇÅ equiv.Œ¥‚ÇÇ} {œï‚ÇÇ' = iFA‚ÇÅ equiv.Œ¥‚ÇÇ}
            comp12 (ED-IdSqH (iFA‚ÇÅ equiv.Œ¥‚ÇÇ))

      Œ¥rFcc' : ‚ü® MFA‚ÇÉ ‚ü©
      Œ¥rFcc' = equiv.Œ¥‚ÇÇ' MFA‚ÇÉ.¬∑ Œ¥rcomp MFA‚ÇÉ.¬∑ equiv.Œ¥‚ÇÅ'

      DnLFcc' : ErrorDomSq rFA‚ÇÉ Fcc' pFcc' (iFA‚ÇÉ Œ¥rFcc')
      DnLFcc' = comp123
        where
          comp12 : ErrorDomSq rFA‚ÇÉ FcFc' (pcomp ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ')) ((iFA‚ÇÉ Œ¥rcomp) ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ'))
          comp12 = ED-CompSqV {d‚ÇÅ = rFA‚ÇÉ} {d‚ÇÇ = rFA‚ÇÉ} {d‚ÇÉ = FcFc'} {œï‚ÇÅ = iFA‚ÇÉ equiv.Œ¥‚ÇÅ'} {œï‚ÇÅ' = iFA‚ÇÉ equiv.Œ¥‚ÇÅ'} {œï‚ÇÇ = pcomp} {œï‚ÇÇ' = iFA‚ÇÉ Œ¥rcomp}
            (ED-IdSqH (iFA‚ÇÉ equiv.Œ¥‚ÇÅ')) DnLcomp

          comp123 : ErrorDomSq rFA‚ÇÉ Fcc' pFcc' ((iFA‚ÇÉ equiv.Œ¥‚ÇÇ') ‚àòed (iFA‚ÇÉ Œ¥rcomp) ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ'))
          comp123 = ED-CompSqV
            {d‚ÇÅ = rFA‚ÇÉ} {d‚ÇÇ = FcFc'} {d‚ÇÉ = Fcc'}
            {œï‚ÇÅ = pcomp ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ')} {œï‚ÇÅ' = (iFA‚ÇÉ Œ¥rcomp) ‚àòed (iFA‚ÇÉ equiv.Œ¥‚ÇÅ')}
            {œï‚ÇÇ = iFA‚ÇÅ equiv.Œ¥‚ÇÇ} {œï‚ÇÇ' = iFA‚ÇÉ equiv.Œ¥‚ÇÇ'}
            comp12 equiv.sq-d'-d

          


    
    
  
