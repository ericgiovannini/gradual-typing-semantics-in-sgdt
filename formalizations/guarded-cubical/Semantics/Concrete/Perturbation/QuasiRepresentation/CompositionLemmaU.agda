{-# OPTIONS --rewriting --guarded #-}
{-# OPTIONS --lossy-unification #-}
{-# OPTIONS --allow-unsolved-metas #-}

open import Common.Later
module Semantics.Concrete.Perturbation.QuasiRepresentation.CompositionLemmaU (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Structure

open import Cubical.Algebra.Monoid.Base

open import Common.Common

open import Semantics.Concrete.DoublePoset.Morphism
open import Semantics.Concrete.DoublePoset.DPMorRelation as PRel
open import Semantics.Concrete.DoublePoset.PBSquare
open import Semantics.Concrete.DoublePoset.ErrorDomain k
open import Semantics.Concrete.DoublePoset.FreeErrorDomain k

open import Semantics.Concrete.Types k as Types
open import Semantics.Concrete.Perturbation.Relation.Alt k
open import Semantics.Concrete.Perturbation.Relation.Constructions k as Rel
open import Semantics.Concrete.Perturbation.QuasiRepresentation k
open import Semantics.Concrete.Perturbation.QuasiRepresentation.Constructions k
open import Semantics.Concrete.Perturbation.QuasiRepresentation.Composition k
open import Semantics.Concrete.Perturbation.QuasiRepresentation.QuasiEquivalence k


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level
    ‚Ñì‚â§ ‚Ñì‚âà ‚ÑìM : Level
    ‚ÑìA ‚ÑìA' ‚Ñì‚â§A ‚Ñì‚â§A' ‚Ñì‚âàA ‚Ñì‚âàA' ‚ÑìMA ‚ÑìMA' : Level
    ‚ÑìB ‚ÑìB' ‚Ñì‚â§B ‚Ñì‚â§B' ‚Ñì‚âàB ‚Ñì‚âàB' ‚ÑìMB ‚ÑìMB' : Level
    ‚Ñìc ‚Ñìc' ‚Ñìd ‚Ñìd' : Level
  
    ‚ÑìA‚ÇÅ   ‚Ñì‚â§A‚ÇÅ   ‚Ñì‚âàA‚ÇÅ   : Level
    ‚ÑìA‚ÇÅ'  ‚Ñì‚â§A‚ÇÅ'  ‚Ñì‚âàA‚ÇÅ'  : Level
    ‚ÑìA‚ÇÇ   ‚Ñì‚â§A‚ÇÇ   ‚Ñì‚âàA‚ÇÇ   : Level
    ‚ÑìA‚ÇÇ'  ‚Ñì‚â§A‚ÇÇ'  ‚Ñì‚âàA‚ÇÇ'  : Level
    ‚ÑìA‚ÇÉ   ‚Ñì‚â§A‚ÇÉ   ‚Ñì‚âàA‚ÇÉ   : Level
    ‚ÑìA‚ÇÉ'  ‚Ñì‚â§A‚ÇÉ'  ‚Ñì‚âàA‚ÇÉ'  : Level

    ‚ÑìB‚ÇÅ   ‚Ñì‚â§B‚ÇÅ   ‚Ñì‚âàB‚ÇÅ   : Level
    ‚ÑìB‚ÇÅ'  ‚Ñì‚â§B‚ÇÅ'  ‚Ñì‚âàB‚ÇÅ'  : Level
    ‚ÑìB‚ÇÇ   ‚Ñì‚â§B‚ÇÇ   ‚Ñì‚âàB‚ÇÇ   : Level
    ‚ÑìB‚ÇÇ'  ‚Ñì‚â§B‚ÇÇ'  ‚Ñì‚âàB‚ÇÇ'  : Level
    ‚ÑìB‚ÇÉ   ‚Ñì‚â§B‚ÇÉ   ‚Ñì‚âàB‚ÇÉ   : Level
    ‚ÑìB‚ÇÉ'  ‚Ñì‚â§B‚ÇÉ'  ‚Ñì‚âàB‚ÇÉ'  : Level

    ‚ÑìMA‚ÇÅ ‚ÑìMA‚ÇÇ ‚ÑìMA‚ÇÉ : Level
    ‚ÑìMB‚ÇÅ ‚ÑìMB‚ÇÇ ‚ÑìMB‚ÇÉ : Level


open F-ob
open F-mor
open F-rel

module _
  {B‚ÇÅ : CompType ‚ÑìB‚ÇÅ ‚Ñì‚â§B‚ÇÅ ‚Ñì‚âàB‚ÇÅ ‚ÑìMB‚ÇÅ}
  {B‚ÇÇ : CompType ‚ÑìB‚ÇÇ ‚Ñì‚â§B‚ÇÇ ‚Ñì‚âàB‚ÇÇ ‚ÑìMB‚ÇÇ}
  {B‚ÇÉ : CompType ‚ÑìB‚ÇÉ ‚Ñì‚â§B‚ÇÉ ‚Ñì‚âàB‚ÇÉ ‚ÑìMB‚ÇÉ}
  (d  : CRelPP B‚ÇÅ B‚ÇÇ ‚Ñìd)
  (d' : CRelPP B‚ÇÇ B‚ÇÉ ‚Ñìd')
  where

  private
    MB‚ÇÅ = PtbC B‚ÇÅ
    MB‚ÇÇ = PtbC B‚ÇÇ
    MB‚ÇÉ = PtbC B‚ÇÉ
    module MB‚ÇÅ = MonoidStr (MB‚ÇÅ .snd)
    module MB‚ÇÉ = MonoidStr (MB‚ÇÉ .snd)

    MUB‚ÇÅ = PtbV (Types.U B‚ÇÅ)
    MUB‚ÇÉ = PtbV (Types.U B‚ÇÉ)
    module MUB‚ÇÅ = MonoidStr (MUB‚ÇÅ .snd)
    module MUB‚ÇÉ = MonoidStr (MUB‚ÇÉ .snd)
    
    iB‚ÇÅ : _ ‚Üí _
    iB‚ÇÅ = fst ‚àò interpC B‚ÇÅ .fst

    iB‚ÇÇ : _ ‚Üí _
    iB‚ÇÇ = fst ‚àò interpC B‚ÇÇ .fst

    iB‚ÇÉ : _ ‚Üí _
    iB‚ÇÉ = fst ‚àò interpC B‚ÇÉ .fst

    iUB‚ÇÅ : _ ‚Üí _
    iUB‚ÇÅ = fst ‚àò interpV (Types.U B‚ÇÅ) .fst

    iUB‚ÇÉ : _ ‚Üí _
    iUB‚ÇÉ = fst ‚àò interpV (Types.U B‚ÇÉ) .fst

    ùîπ‚ÇÅ = CompType‚ÜíErrorDomain B‚ÇÅ
    ùîπ‚ÇÇ = CompType‚ÜíErrorDomain B‚ÇÇ
    ùîπ‚ÇÉ = CompType‚ÜíErrorDomain B‚ÇÉ

    rB‚ÇÅ = idEDRel ùîπ‚ÇÅ
    rB‚ÇÇ = idEDRel ùîπ‚ÇÇ
    rB‚ÇÉ = idEDRel ùîπ‚ÇÉ

    rUB‚ÇÅ = idPRel (ValType‚ÜíPredomain (Types.U B‚ÇÅ))
    rUB‚ÇÉ = idPRel (ValType‚ÜíPredomain (Types.U B‚ÇÉ))

    |d|  = CRelPP‚ÜíErrorDomRel d
    |d'| = CRelPP‚ÜíErrorDomRel d'
    |dd'| = |d| ‚äôed |d'|


  -- If Ud and Ud' are quasi-left-representable, then U(dd') is
  -- quasi-left-representable.
  module _
    (œÅd   : RightRepC B‚ÇÅ B‚ÇÇ |d|)
    (œÅd'  : RightRepC B‚ÇÇ B‚ÇÉ |d'|)
    (œÅUd  : LeftRepV (Types.U B‚ÇÅ) (Types.U B‚ÇÇ) (U-rel |d|))
    (œÅUd' : LeftRepV (Types.U B‚ÇÇ) (Types.U B‚ÇÉ) (U-rel |d'|))
    where

    repUdUd'‚ÜírepUdd' :
      LeftRepV (Types.U B‚ÇÅ) (Types.U B‚ÇÉ) (U-rel |dd'|)
    repUdUd'‚ÜírepUdd' = mkLeftRepV (Types.U B‚ÇÅ) (Types.U B‚ÇÉ) (U-rel |dd'|)
      eUdd' Œ¥lUdd' UpRUdd' Œ¥rUdd' UpLUdd'
      where
      Udd' : PBRel _ _ _
      Udd' = U-rel |dd'|

      -- Data corresponding to Ud
      eUd   = embV _ _ _ œÅUd
      Œ¥lUd  = Œ¥leV _ _ _ œÅUd
      Œ¥rUd  = Œ¥reV _ _ _ œÅUd
      UpLUd = UpLV _ _ _ œÅUd
      UpRUd = UpRV _ _ _ œÅUd


      -- Data corresponding to Ud'
      eUd'   = embV _ _ _ œÅUd'
      Œ¥lUd'  = Œ¥leV _ _ _ œÅUd'
      Œ¥rUd'  = Œ¥reV _ _ _ œÅUd'
      UpLUd' = UpLV _ _ _ œÅUd'
      UpRUd' = UpRV _ _ _ œÅUd'


      -- Data corresponding to UdUd'
      UdUd' : PBRel _ _ _
      UdUd' =  U-rel |d| PRel.‚äô U-rel |d'|

      œÅcomp-left : LeftRepV (Types.U B‚ÇÅ) (Types.U B‚ÇÉ) UdUd'
      œÅcomp-left = LeftRepV-Comp (Rel.U d) (Rel.U d') œÅUd œÅUd'

      ecomp   = embV _ _ _ œÅcomp-left
      Œ¥lcomp  = Œ¥leV _ _ _ œÅcomp-left
      Œ¥rcomp  = Œ¥reV _ _ _ œÅcomp-left
      UpLcomp = UpLV _ _ _ œÅcomp-left
      UpRcomp = UpRV _ _ _ œÅcomp-left


      -- Know: Udd' and UdUd' have the same projection, so are quasi-equivalent
      equiv : QuasiOrderEquivV (Types.U B‚ÇÅ) (Types.U B‚ÇÉ) Udd' UdUd'
      equiv = eqEmb‚ÜíquasiEquivV _ _ (U-rightRep _ _ |dd'|  (RightRepC-Comp d d' œÅd œÅd'))
        (RightRepV-Comp (Rel.U d) (Rel.U d') (U-rightRep _ _ |d| œÅd) (U-rightRep _ _ |d'| œÅd'))
        refl -- U preserves composition definitionally    

      module equiv = QuasiOrderEquivV equiv
      sq-Udd'-UdUd' = equiv.sq-c-c'
      sq-UdUd'-Udd' = equiv.sq-c'-c

      -- Data corresponding to U(dd')

      eUdd' : PBMor (U-ob ùîπ‚ÇÅ) (U-ob ùîπ‚ÇÉ)
      eUdd' = iUB‚ÇÉ equiv.Œ¥‚ÇÇ' ‚àòp ecomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ

      Œ¥lUdd' : ‚ü® MUB‚ÇÅ ‚ü©
      Œ¥lUdd' = equiv.Œ¥‚ÇÇ MUB‚ÇÅ.¬∑ Œ¥lcomp MUB‚ÇÅ.¬∑ equiv.Œ¥‚ÇÅ

      UpRUdd' : PBSq rUB‚ÇÅ Udd' (iUB‚ÇÅ Œ¥lUdd') eUdd'
      UpRUdd' = CompSqV
        {c‚ÇÅ = rUB‚ÇÅ} {c‚ÇÇ = UdUd'} {c‚ÇÉ = Udd'}
        {f‚ÇÅ = (iUB‚ÇÅ Œ¥lcomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ)} {g‚ÇÅ = (ecomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ)}
        {f‚ÇÇ = iUB‚ÇÅ equiv.Œ¥‚ÇÇ} {g‚ÇÇ = iUB‚ÇÉ equiv.Œ¥‚ÇÇ'}
        comp12 sq-UdUd'-Udd'
        where
          comp12 : PBSq rUB‚ÇÅ UdUd' (iUB‚ÇÅ Œ¥lcomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ) (ecomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ)
          comp12 = CompSqV
            {c‚ÇÅ = rUB‚ÇÅ} {c‚ÇÇ = rUB‚ÇÅ} {c‚ÇÉ = UdUd'}
            (Predom-IdSqH (iUB‚ÇÅ equiv.Œ¥‚ÇÅ)) UpRcomp

      Œ¥rUdd' : ‚ü® MUB‚ÇÉ ‚ü©
      Œ¥rUdd' = equiv.Œ¥‚ÇÇ' MUB‚ÇÉ.¬∑ Œ¥rcomp MUB‚ÇÉ.¬∑ equiv.Œ¥‚ÇÅ'

      UpLUdd' : PBSq Udd' rUB‚ÇÉ eUdd' (iUB‚ÇÉ Œ¥rUdd')
      UpLUdd' = CompSqV
        {c‚ÇÅ = Udd'} {c‚ÇÇ = rUB‚ÇÉ} {c‚ÇÉ = rUB‚ÇÉ}
        {f‚ÇÅ = (ecomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ)} {g‚ÇÅ = (iUB‚ÇÉ Œ¥rcomp ‚àòp iUB‚ÇÉ equiv.Œ¥‚ÇÅ')}
        {f‚ÇÇ = iUB‚ÇÉ equiv.Œ¥‚ÇÇ'} {g‚ÇÇ = iUB‚ÇÉ equiv.Œ¥‚ÇÇ'}
        comp12 (Predom-IdSqH (iUB‚ÇÉ equiv.Œ¥‚ÇÇ'))
        where
          comp12 : PBSq Udd' rUB‚ÇÉ (ecomp ‚àòp iUB‚ÇÅ equiv.Œ¥‚ÇÅ) (iUB‚ÇÉ Œ¥rcomp ‚àòp iUB‚ÇÉ equiv.Œ¥‚ÇÅ')
          comp12 = CompSqV
            {c‚ÇÅ = Udd'} {c‚ÇÇ = UdUd'} {c‚ÇÉ = rUB‚ÇÉ}           
            sq-Udd'-UdUd' UpLcomp          

          


{-

    repFdFd'‚ÜírepFdd' = mkRightRepC (Types.F B‚ÇÅ) (Types.F B‚ÇÉ) (F-rel (|d| ‚äô |d'|))
      pFdd' Œ¥lFdd' DnRFdd' Œ¥rFdd' DnLFdd'
      where

      -- Data corresponding to F(cc')

      -- Note: It appears that we do not need to transport along the fact that
      -- iFB‚ÇÅ and iFB‚ÇÉ preserve composition, because they do so definitionally.

      pFcc' : ErrorDomMor (F-ob ùî∏‚ÇÉ) (F-ob ùî∏‚ÇÅ)
      pFcc' = (iFB‚ÇÅ equiv.Œ¥‚ÇÇ) ‚àòed pcomp ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ')

      Œ¥lFcc' : ‚ü® MFB‚ÇÅ ‚ü©
      Œ¥lFcc' = equiv.Œ¥‚ÇÇ MFB‚ÇÅ.¬∑ Œ¥lcomp MFB‚ÇÅ.¬∑ equiv.Œ¥‚ÇÅ

      DnRFcc' : ErrorDomSq Fcc' rFB‚ÇÅ (iFB‚ÇÅ Œ¥lFcc') pFcc'
      DnRFcc' = comp123
        where
          comp12 : ErrorDomSq Fcc' rFB‚ÇÅ ((iFB‚ÇÅ Œ¥lcomp) ‚àòed (iFB‚ÇÅ equiv.Œ¥‚ÇÅ)) (pcomp ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ'))
          comp12 = ED-CompSqV {d‚ÇÅ = Fcc'} {d‚ÇÇ = FcFc'} {d‚ÇÉ = rFB‚ÇÅ} {œï‚ÇÅ = iFB‚ÇÅ equiv.Œ¥‚ÇÅ} {œï‚ÇÅ' = iFB‚ÇÉ equiv.Œ¥‚ÇÅ'} {œï‚ÇÇ = iFB‚ÇÅ Œ¥lcomp} {œï‚ÇÇ' = pcomp}
            equiv.sq-d-d' DnRcomp

          comp123 : ErrorDomSq Fcc' rFB‚ÇÅ ((iFB‚ÇÅ equiv.Œ¥‚ÇÇ) ‚àòed (iFB‚ÇÅ Œ¥lcomp) ‚àòed (iFB‚ÇÅ equiv.Œ¥‚ÇÅ)) pFcc'
          comp123 = ED-CompSqV
            {d‚ÇÅ = Fcc'} {d‚ÇÇ = rFB‚ÇÅ} {d‚ÇÉ = rFB‚ÇÅ}
            {œï‚ÇÅ = (iFB‚ÇÅ Œ¥lcomp) ‚àòed (iFB‚ÇÅ equiv.Œ¥‚ÇÅ)} {œï‚ÇÅ' = pcomp ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ')}
            {œï‚ÇÇ = iFB‚ÇÅ equiv.Œ¥‚ÇÇ} {œï‚ÇÇ' = iFB‚ÇÅ equiv.Œ¥‚ÇÇ}
            comp12 (ED-IdSqH (iFB‚ÇÅ equiv.Œ¥‚ÇÇ))

      Œ¥rFcc' : ‚ü® MFB‚ÇÉ ‚ü©
      Œ¥rFcc' = equiv.Œ¥‚ÇÇ' MFB‚ÇÉ.¬∑ Œ¥rcomp MFB‚ÇÉ.¬∑ equiv.Œ¥‚ÇÅ'

      DnLFcc' : ErrorDomSq rFB‚ÇÉ Fcc' pFcc' (iFB‚ÇÉ Œ¥rFcc')
      DnLFcc' = comp123
        where
          comp12 : ErrorDomSq rFB‚ÇÉ FcFc' (pcomp ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ')) ((iFB‚ÇÉ Œ¥rcomp) ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ'))
          comp12 = ED-CompSqV {d‚ÇÅ = rFB‚ÇÉ} {d‚ÇÇ = rFB‚ÇÉ} {d‚ÇÉ = FcFc'} {œï‚ÇÅ = iFB‚ÇÉ equiv.Œ¥‚ÇÅ'} {œï‚ÇÅ' = iFB‚ÇÉ equiv.Œ¥‚ÇÅ'} {œï‚ÇÇ = pcomp} {œï‚ÇÇ' = iFB‚ÇÉ Œ¥rcomp}
            (ED-IdSqH (iFB‚ÇÉ equiv.Œ¥‚ÇÅ')) DnLcomp

          comp123 : ErrorDomSq rFB‚ÇÉ Fcc' pFcc' ((iFB‚ÇÉ equiv.Œ¥‚ÇÇ') ‚àòed (iFB‚ÇÉ Œ¥rcomp) ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ'))
          comp123 = ED-CompSqV
            {d‚ÇÅ = rFB‚ÇÉ} {d‚ÇÇ = FcFc'} {d‚ÇÉ = Fcc'}
            {œï‚ÇÅ = pcomp ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ')} {œï‚ÇÅ' = (iFB‚ÇÉ Œ¥rcomp) ‚àòed (iFB‚ÇÉ equiv.Œ¥‚ÇÅ')}
            {œï‚ÇÇ = iFB‚ÇÅ equiv.Œ¥‚ÇÇ} {œï‚ÇÇ' = iFB‚ÇÉ equiv.Œ¥‚ÇÇ'}
            comp12 equiv.sq-d'-d

          
-}

    
    
  
