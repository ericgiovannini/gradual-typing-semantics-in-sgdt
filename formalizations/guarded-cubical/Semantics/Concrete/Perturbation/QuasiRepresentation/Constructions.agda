{-# OPTIONS --rewriting --guarded #-}
{-# OPTIONS --lossy-unification #-}
{-# OPTIONS --allow-unsolved-metas #-}

open import Common.Later
module Semantics.Concrete.Perturbation.QuasiRepresentation.Constructions (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Structure

open import Cubical.Algebra.Monoid.Base
open import Cubical.Algebra.Monoid.More
open import Cubical.Algebra.Monoid.FreeProduct as FP
open import Cubical.Data.Nat
open import Cubical.Data.Sum

open import Common.Common
open import Semantics.Concrete.DoublePoset.Base
open import Semantics.Concrete.DoublePoset.Morphism
open import Semantics.Concrete.DoublePoset.Constructions hiding (œÄ1; œÄ2 ; ùîπ)
open import Semantics.Concrete.DoublePoset.DPMorRelation as PRel hiding (‚äé-inl ; ‚äé-inr)
open import Semantics.Concrete.DoublePoset.PBSquare
open import Semantics.Concrete.DoublePoset.DblPosetCombinators
open import Semantics.Concrete.DoublePoset.ErrorDomain k
open import Semantics.Concrete.DoublePoset.FreeErrorDomain k
open import Semantics.Concrete.DoublePoset.KleisliFunctors k

open import Semantics.Concrete.Perturbation.Semantic k
open import Semantics.Concrete.Types k as Types
open import Semantics.Concrete.Perturbation.QuasiRepresentation k
open import Semantics.Concrete.Perturbation.Kleisli k as KPtb

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì''' : Level
    ‚Ñì‚â§ ‚Ñì‚âà ‚ÑìM : Level
    ‚ÑìA ‚ÑìA' ‚Ñì‚â§A ‚Ñì‚â§A' ‚Ñì‚âàA ‚Ñì‚âàA' ‚ÑìMA ‚ÑìMA' : Level
    ‚ÑìB ‚ÑìB' ‚Ñì‚â§B ‚Ñì‚â§B' ‚Ñì‚âàB ‚Ñì‚âàB' ‚ÑìMB ‚ÑìMB' : Level
    ‚Ñìc ‚Ñìc' ‚Ñìd ‚Ñìd' : Level
  
    ‚ÑìA‚ÇÅ   ‚Ñì‚â§A‚ÇÅ   ‚Ñì‚âàA‚ÇÅ   : Level
    ‚ÑìA‚ÇÅ'  ‚Ñì‚â§A‚ÇÅ'  ‚Ñì‚âàA‚ÇÅ'  : Level
    ‚ÑìA‚ÇÇ   ‚Ñì‚â§A‚ÇÇ   ‚Ñì‚âàA‚ÇÇ   : Level
    ‚ÑìA‚ÇÇ'  ‚Ñì‚â§A‚ÇÇ'  ‚Ñì‚âàA‚ÇÇ'  : Level
    ‚ÑìA‚ÇÉ   ‚Ñì‚â§A‚ÇÉ   ‚Ñì‚âàA‚ÇÉ   : Level
    ‚ÑìA‚ÇÉ'  ‚Ñì‚â§A‚ÇÉ'  ‚Ñì‚âàA‚ÇÉ'  : Level

    ‚ÑìB‚ÇÅ   ‚Ñì‚â§B‚ÇÅ   ‚Ñì‚âàB‚ÇÅ   : Level
    ‚ÑìB‚ÇÅ'  ‚Ñì‚â§B‚ÇÅ'  ‚Ñì‚âàB‚ÇÅ'  : Level
    ‚ÑìB‚ÇÇ   ‚Ñì‚â§B‚ÇÇ   ‚Ñì‚âàB‚ÇÇ   : Level
    ‚ÑìB‚ÇÇ'  ‚Ñì‚â§B‚ÇÇ'  ‚Ñì‚âàB‚ÇÇ'  : Level
    ‚ÑìB‚ÇÉ   ‚Ñì‚â§B‚ÇÉ   ‚Ñì‚âàB‚ÇÉ   : Level
    ‚ÑìB‚ÇÉ'  ‚Ñì‚â§B‚ÇÉ'  ‚Ñì‚âàB‚ÇÉ'  : Level
   
    ‚Ñìc‚ÇÅ ‚Ñìc‚ÇÇ ‚Ñìc‚ÇÉ  : Level    

    ‚ÑìMA‚ÇÅ ‚ÑìMA‚ÇÇ ‚ÑìMA‚ÇÉ : Level
    ‚ÑìMB‚ÇÅ ‚ÑìMB‚ÇÇ ‚ÑìMB‚ÇÉ : Level
    ‚ÑìMA‚ÇÅ' ‚ÑìMA‚ÇÇ' : Level


open F-ob
open F-mor
open F-rel
open F-sq

open ExtAsEDMorphism


-- The relations induced by inl and inr are quasi-left-representable,
-- and their liftings by F are quasi-right-representable.

module _  {A‚ÇÅ : ValType ‚ÑìA‚ÇÅ ‚Ñì‚â§A‚ÇÅ ‚Ñì‚âàA‚ÇÅ ‚ÑìMA‚ÇÅ}
          {A‚ÇÇ : ValType ‚ÑìA‚ÇÇ ‚Ñì‚â§A‚ÇÇ ‚Ñì‚âàA‚ÇÇ ‚ÑìMA‚ÇÇ}
  where
  private
    -- Predomains
    |A‚ÇÅ| = ValType‚ÜíPredomain A‚ÇÅ
    |A‚ÇÇ| = ValType‚ÜíPredomain A‚ÇÇ

    module |A‚ÇÅ| = PosetBisimStr (|A‚ÇÅ| .snd)
    module |A‚ÇÇ| = PosetBisimStr (|A‚ÇÇ| .snd)

    -- Monoids and interpretation homomorphisms
    module MA‚ÇÅ   = MonoidStr (PtbV A‚ÇÅ .snd)
    module MA‚ÇÇ   = MonoidStr (PtbV A‚ÇÇ .snd)
    module MSum  = MonoidStr (PtbV (A‚ÇÅ Types.‚äé A‚ÇÇ) .snd)
    module MFA‚ÇÅ  = MonoidStr (PtbC (Types.F A‚ÇÅ) .snd)
    module MFA‚ÇÇ  = MonoidStr (PtbC (Types.F A‚ÇÇ) .snd)
    module MFSum = MonoidStr (PtbC (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) .snd)

    iA‚ÇÅ = fst ‚àò interpV A‚ÇÅ .fst
    iA‚ÇÇ = fst ‚àò interpV A‚ÇÇ .fst
    iFA‚ÇÅ = fst ‚àò interpC (Types.F A‚ÇÅ) .fst
    iFA‚ÇÇ = fst ‚àò interpC (Types.F A‚ÇÇ) .fst
    iSum = fst ‚àò interpV (A‚ÇÅ Types.‚äé A‚ÇÇ) .fst
    iFSum = fst ‚àò interpC (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) .fst

    module iA‚ÇÅ = IsMonoidHom (interpV A‚ÇÅ .snd)
    module iA‚ÇÇ = IsMonoidHom (interpV A‚ÇÇ .snd)

    -- Relations
    rA‚ÇÅ = idPRel |A‚ÇÅ|
    rA‚ÇÇ = idPRel |A‚ÇÇ|
    rFA‚ÇÅ = idEDRel (F-ob |A‚ÇÅ|)
    rFA‚ÇÇ = idEDRel (F-ob |A‚ÇÇ|)
    
    inl-rel = PRel.‚äé-inl |A‚ÇÅ| |A‚ÇÇ|
    inr-rel = PRel.‚äé-inr |A‚ÇÅ| |A‚ÇÇ|
    
    rSum = idPRel (|A‚ÇÅ| ‚äép |A‚ÇÇ|)
    rFSum = idEDRel (F-ob (|A‚ÇÅ| ‚äép |A‚ÇÇ|))


  -- First we show the relation induced by inl is quasi-left representable
  ‚äé-inl-LeftRep : LeftRepV A‚ÇÅ (A‚ÇÅ Types.‚äé A‚ÇÇ) inl-rel
  ‚äé-inl-LeftRep = mkLeftRepV A‚ÇÅ (A‚ÇÅ Types.‚äé A‚ÇÇ) inl-rel
    œÉ1 MA‚ÇÅ.Œµ UpR MSum.Œµ UpL
    where
      UpR : PBSq rA‚ÇÅ inl-rel (iA‚ÇÅ MA‚ÇÅ.Œµ) œÉ1
      UpR x y xRy = lift (subst
        (Œª z ‚Üí rA‚ÇÅ .PBRel.R z y)
        (sym (funExt‚Åª (cong (PBMor.f ‚àò fst) (interpV A‚ÇÅ .snd .IsMonoidHom.presŒµ)) x))
        xRy)

      -- This follows from the fact that the relation PRel.‚äé-inl is
      -- defined as a restriction along a morphism.
      -- 
      -- Also, there is no need to transport along the fact that iSum
      -- MSum.Œµ ‚â° Id because this holds definitionally by definition
      -- of the recursor for the coproduct of monoids.
      UpL : PBSq inl-rel rSum œÉ1 (iSum MSum.Œµ)
      UpL = SqV-functionalRel œÉ1 Id rSum

  -- Now we show that F applied to the relation is quasi-right-representable
  ‚äé-inl-F-RightRep : RightRepC (Types.F A‚ÇÅ) (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) (F-rel inl-rel)
  ‚äé-inl-F-RightRep = mkRightRepC (Types.F A‚ÇÅ) (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) (F-rel inl-rel)
    proj Œ¥l DnR Œ¥r DnL
    where
      proj : ErrorDomMor (F-ob (|A‚ÇÅ| ‚äép |A‚ÇÇ|)) (F-ob |A‚ÇÅ|)
      proj = Ext (Case' Œ∑-mor ‚Ñß-mor)

      Œ¥l : ‚ü® PtbC (Types.F A‚ÇÅ) ‚ü©
      Œ¥l = MFA‚ÇÅ.Œµ

      DnR : ErrorDomSq (F-rel inl-rel) rFA‚ÇÅ (iFA‚ÇÅ Œ¥l) proj
      DnR = subst (Œª z ‚Üí ErrorDomSq (F-rel inl-rel) rFA‚ÇÅ z proj) eq Œ±
        where
          eq : Ext Œ∑-mor ‚â° iFA‚ÇÅ Œ¥l
          eq = Ext-unit-right
        
          Œ± : ErrorDomSq (F-rel inl-rel) rFA‚ÇÅ (Ext Œ∑-mor) proj
          Œ± = Ext-sq inl-rel rFA‚ÇÅ Œ∑-mor (Case' Œ∑-mor ‚Ñß-mor)
            (Œª { x (inl y) xRy ‚Üí Œ∑-sq rA‚ÇÅ x y (lower xRy)})

      Œ¥r : ‚ü® PtbC (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) ‚ü©
      Œ¥r = MFSum.Œµ

      DnL : ErrorDomSq rFSum (F-rel inl-rel) proj (iFSum Œ¥r)
      DnL = subst (Œª z ‚Üí ErrorDomSq rFSum (F-rel inl-rel) proj z) eq Œ±
        where
          eq : Ext Œ∑-mor ‚â° iFSum Œ¥r
          eq = Ext-unit-right

          Œ± : ErrorDomSq rFSum (F-rel inl-rel) proj (Ext Œ∑-mor)
          Œ± = Ext-sq rSum (F-rel inl-rel) (Case' Œ∑-mor ‚Ñß-mor) Œ∑-mor           
            (Œª { (inl x) (inl y) xRy ‚Üí Œ∑-sq inl-rel x (inl y) xRy
               ; (inr x) (inr y) xRy ‚Üí F-rel inl-rel .ErrorDomRel.R‚Ñß _})


  -- Now we show the same for inr
  ‚äé-inr-LeftRep : LeftRepV A‚ÇÇ (A‚ÇÅ Types.‚äé A‚ÇÇ) inr-rel
  ‚äé-inr-LeftRep = mkLeftRepV _ _ _
    œÉ2 MA‚ÇÇ.Œµ UpR MSum.Œµ UpL
    where
      UpR : PBSq rA‚ÇÇ inr-rel (iA‚ÇÇ MA‚ÇÇ.Œµ) œÉ2
      UpR x y xRy = lift (subst
        (Œª z ‚Üí rA‚ÇÇ .PBRel.R z y)
        (sym (funExt‚Åª (cong (PBMor.f ‚àò fst) (interpV A‚ÇÇ .snd .IsMonoidHom.presŒµ)) x))
        xRy)

      UpL : PBSq inr-rel rSum œÉ2 (iSum MSum.Œµ)
      UpL = SqV-functionalRel œÉ2 Id rSum

  ‚äé-inr-F-RightRep : RightRepC (Types.F A‚ÇÇ) (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) (F-rel inr-rel)
  ‚äé-inr-F-RightRep = mkRightRepC (Types.F A‚ÇÇ) (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) (F-rel inr-rel)
    proj Œ¥l DnR Œ¥r DnL
    where
      proj : ErrorDomMor (F-ob (|A‚ÇÅ| ‚äép |A‚ÇÇ|)) (F-ob |A‚ÇÇ|)
      proj = Ext (Case' ‚Ñß-mor Œ∑-mor)

      Œ¥l : ‚ü® PtbC (Types.F A‚ÇÇ) ‚ü©
      Œ¥l = MFA‚ÇÇ.Œµ

      DnR : ErrorDomSq (F-rel inr-rel) rFA‚ÇÇ (iFA‚ÇÇ Œ¥l) proj
      DnR = subst (Œª z ‚Üí ErrorDomSq (F-rel inr-rel) rFA‚ÇÇ z proj) eq Œ±
        where
          eq : Ext Œ∑-mor ‚â° iFA‚ÇÇ Œ¥l
          eq = Ext-unit-right
        
          Œ± : ErrorDomSq (F-rel inr-rel) rFA‚ÇÇ (Ext Œ∑-mor) proj
          Œ± = Ext-sq inr-rel rFA‚ÇÇ Œ∑-mor (Case' ‚Ñß-mor Œ∑-mor)
            (Œª { x (inr y) xRy ‚Üí Œ∑-sq rA‚ÇÇ x y (lower xRy)})

      Œ¥r : ‚ü® PtbC (Types.F (A‚ÇÅ Types.‚äé A‚ÇÇ)) ‚ü©
      Œ¥r = MFSum.Œµ

      DnL : ErrorDomSq rFSum (F-rel inr-rel) proj (iFSum Œ¥r)
      DnL = subst (Œª z ‚Üí ErrorDomSq rFSum (F-rel inr-rel) proj z) eq Œ±
        where
          eq : Ext Œ∑-mor ‚â° iFSum Œ¥r
          eq = Ext-unit-right

          Œ± : ErrorDomSq rFSum (F-rel inr-rel) proj (Ext Œ∑-mor)
          Œ± = Ext-sq rSum (F-rel inr-rel) (Case' ‚Ñß-mor Œ∑-mor) Œ∑-mor           
            (Œª { (inl x) (inl y) xRy ‚Üí F-rel inr-rel .ErrorDomRel.R‚Ñß _
               ; (inr x) (inr y) xRy ‚Üí Œ∑-sq inr-rel x (inr y) xRy})
      

      
-- If A is isomorphic to A' via f, then the relation induced by f is
-- quasi-left-representable, and its lifting by F is
-- quasi-right-representable.

module _
  {A : ValType ‚ÑìA ‚Ñì‚â§A ‚Ñì‚âàA ‚ÑìMA}
  {A' : ValType ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA' ‚ÑìMA'}
  (isom : PredomIso (ValType‚ÜíPredomain A) (ValType‚ÜíPredomain A'))
  where

  private
    module isom = PredomIso isom

    |A| = ValType‚ÜíPredomain A
    |A'| = ValType‚ÜíPredomain A'
    
    rA   = idPRel |A|
    rA'  = idPRel |A'|
    rFA  = idEDRel (F-ob |A|)
    rFA' = idEDRel (F-ob |A'|)

    module MA   = MonoidStr (PtbV A .snd)
    module MA'  = MonoidStr (PtbV A' .snd)
    module MFA  = MonoidStr (PtbC (Types.F A) .snd)
    module MFA' = MonoidStr (PtbC (Types.F A') .snd)

    iA  = fst ‚àò interpV A .fst
    iA' = fst ‚àò interpV A' .fst
    iFA = fst ‚àò interpC (Types.F A) .fst
    iFA' = fst ‚àò interpC (Types.F A') .fst
    
    rel = functionalRel isom.fun Id rA'
    
  iso‚ÜíLeftRepV : LeftRepV A A' rel
  iso‚ÜíLeftRepV = mkLeftRepV A A' rel
    isom.fun MA.Œµ UpR MA'.Œµ UpL
    where
      UpR : PBSq rA rel (iA MA.Œµ) isom.fun
      UpR = subst
              (Œª z ‚Üí PBSq rA rel z isom.fun)
              (sym (cong fst (interpV A .snd .IsMonoidHom.presŒµ)))
              Œ±
        where
          Œ± : PBSq rA rel Id isom.fun
          Œ± x y xRy = isom.fun .PBMor.isMon xRy
          -- Given : x ‚äëA y
          -- NTS : (isom.fun x) ‚äëA' (isom.fun y)

      UpL : PBSq rel rA' isom.fun (iA' MA'.Œµ)
      UpL = subst
              (Œª z ‚Üí PBSq rel rA' isom.fun z)
              (sym (cong fst (interpV A' .snd .IsMonoidHom.presŒµ)))
              Œ±
        where
          Œ± : PBSq rel rA' isom.fun Id
          Œ± = SqV-functionalRel isom.fun Id rA'


  -- There is no need to transport along the fact that iFA MF.Œµ ‚â°
  -- Id, because this holds definitionally by definition of the
  -- recursor for the coproduct of monoids.
  iso‚ÜíRightRepC : RightRepC (Types.F A) (Types.F A') (F-rel rel)
  iso‚ÜíRightRepC = mkRightRepC (F A) (F A') (F-rel rel)
    (F-mor isom.inv) MFA.Œµ DnR MFA'.Œµ DnL
    where
      DnR : ErrorDomSq (F-rel rel) rFA (iFA MFA.Œµ) (F-mor isom.inv)
      DnR = subst
        (Œª z ‚Üí ErrorDomSq (F-rel rel) rFA z (F-mor isom.inv))
        F-mor-pres-id
        Œ±
        where
          Œ± : ErrorDomSq (F-rel rel) rFA (F-mor Id) (F-mor isom.inv)
          Œ± = F-sq rel rA Id isom.inv
            (Œª x y xRy ‚Üí subst
              (Œª z ‚Üí rA .PBRel.R z (isom.inv .PBMor.f y))
              (isom.invLeft x)
              (isom.inv .PBMor.isMon xRy))
            -- Given: x : A, y : A' such that (isom.fun x) ‚äëA' y
            -- Show: x ‚äëA (isom.inv y)
            -- But x = isom.inv (isom.fun x) so sufficies to show
            --   (isom.inv (isom.fun x)) ‚äëA (isom.inv y)
            -- Then by monotonicity of isom.inv, sufficies to show
            --   (isom.fun x) ‚äëA' y

          -- Œ± = Ext-sq rel rFA Œ∑-mor (Œ∑-mor ‚àòp isom.inv)
          --   Œª x y xRy ‚Üí Œ∑-sq rA x (isom.inv .PBMor.f y) {!!}

      DnL : ErrorDomSq rFA' (F-rel rel) (F-mor isom.inv) (iFA' MFA'.Œµ)
      DnL = subst
        (Œª z ‚Üí ErrorDomSq rFA' (F-rel rel) (F-mor isom.inv) z)
        F-mor-pres-id
        Œ±
        where
          Œ± : ErrorDomSq rFA' (F-rel rel) (F-mor isom.inv) (F-mor Id)
          Œ± = F-sq rA' rel isom.inv Id
            (Œª x y xRy ‚Üí subst
              (Œª z ‚Üí rA' .PBRel.R z y)
              (sym (isom.invRight x))
              xRy)
            -- Given : x ‚äëA' y
            -- Show: (isom.fun (isom.inv x)) ‚äëA' y
    




-- The functor F preserves quasi-representability. Namely:
--
-- 1. If c is quasi-left-representable, then Fc is also quasi-left-representable.
-- 2. If c is quasi-right-representable, then Fc is also quasi-right-representable.
module _ (A  : ValType ‚ÑìA  ‚Ñì‚â§A  ‚Ñì‚âàA ‚ÑìMA) (A'  : ValType ‚ÑìA'  ‚Ñì‚â§A'  ‚Ñì‚âàA' ‚ÑìMA')
         (c : PBRel (ValType‚ÜíPredomain A) (ValType‚ÜíPredomain A') ‚Ñìc) where

  private
    MA  = PtbV A
    iA  = interpV A .fst
    MA' = PtbV A'
    iA' = interpV A' .fst

    ùî∏  = ValType‚ÜíPredomain A
    ùî∏' = ValType‚ÜíPredomain A'

    rA  = idPRel ùî∏
    rA' = idPRel ùî∏'


  -- Note: It seems that Agda is implicitly using the equivalence
  -- between the relations.  F (rA) and r_(FA). No transporting is needed.

  F-leftRep :
    LeftRepV A A' c ‚Üí
    LeftRepC (Types.F A) (Types.F A') (F-rel c)
  F-leftRep œÅc = mkLeftRepC (Types.F A) (Types.F A') (F-rel c) eFc Œ¥lFc UpRFc Œ¥rFc UpLFc
  -- Replacing the first two arguments with _'s increases the type-checking time significantly.
 
    where
      -- Data corresponding to c
      ec   = embV _ _ _ œÅc
      Œ¥lc  = Œ¥leV _ _ _ œÅc
      Œ¥rc  = Œ¥reV _ _ _ œÅc
      UpLc = UpLV _ _ _ œÅc
      UpRc = UpRV _ _ _ œÅc

      -- Data corresponding to Fc
      eFc : ErrorDomMor (F-ob ùî∏) (F-ob ùî∏')
      eFc = F-mor ec

      Œ¥lFc : ‚ü® _ ‚äï MA ‚ü©
      Œ¥lFc = i‚ÇÇ .fst Œ¥lc

      UpRFc : ErrorDomSq (F-rel (idPRel ùî∏)) (F-rel c) (F-mor (iA Œ¥lc .fst)) (F-mor ec)
      UpRFc = F-sq (idPRel ùî∏) c (iA Œ¥lc .fst) ec UpRc

      Œ¥rFc : ‚ü® _ ‚äï MA' ‚ü©
      Œ¥rFc = i‚ÇÇ .fst Œ¥rc

      UpLFc : ErrorDomSq (F-rel c) (F-rel (idPRel ùî∏')) (F-mor ec) (F-mor (iA' Œ¥rc .fst))
      UpLFc = F-sq c (idPRel ùî∏') ec (iA' Œ¥rc .fst) UpLc


  F-rightRep :
    RightRepV A A' c ‚Üí
    RightRepC (Types.F A) (Types.F A') (F-rel c)
  F-rightRep œÅc = mkRightRepC (Types.F A) (Types.F A') (F-rel c) pFc Œ¥lFc DnRFc Œ¥rFc DnLFc
    where
      -- Data corresponding to c
      pc   = projV _ _ _ œÅc
      Œ¥lc  = Œ¥lpV  _ _ _ œÅc
      Œ¥rc  = Œ¥rpV  _ _ _ œÅc
      DnRc = DnRV  _ _ _ œÅc
      DnLc = DnLV  _ _ _ œÅc
      
      -- Data corresponding to Fc
      pFc : ErrorDomMor (F-ob ùî∏') (F-ob ùî∏)
      pFc = F-mor pc

      Œ¥lFc : ‚ü® _ ‚äï MA ‚ü©
      Œ¥lFc = i‚ÇÇ .fst Œ¥lc

      DnRFc : ErrorDomSq (F-rel c) (F-rel rA) (F-mor (iA Œ¥lc .fst)) pFc
      DnRFc = F-sq c rA (iA Œ¥lc .fst) pc DnRc

      Œ¥rFc : ‚ü® _ ‚äï MA' ‚ü©
      Œ¥rFc = i‚ÇÇ .fst Œ¥rc

      DnLFc : ErrorDomSq (F-rel rA') (F-rel c) pFc (F-mor (iA' Œ¥rc .fst))
      DnLFc = F-sq rA' c pc (iA' Œ¥rc .fst) DnLc


-----------------------------------------------------------------------------------

-- The functor U preserves quasi-representability. Namely:
--
-- 1. If d is quasi-left-representable, then Ud is also quasi-left-representable.
-- 2. If d is quasi-right-representable, then Ud is also quasi-right-representable.

module _ (B  : CompType ‚ÑìB  ‚Ñì‚â§B  ‚Ñì‚âàB ‚ÑìMB) (B'  : CompType ‚ÑìB'  ‚Ñì‚â§B'  ‚Ñì‚âàB' ‚ÑìMB')
         (d : ErrorDomRel (CompType‚ÜíErrorDomain B) (CompType‚ÜíErrorDomain B') ‚Ñìd) where

  private
    MB  = PtbC B
    iB  = interpC B .fst
    MB' = PtbC B'
    iB' = interpC B' .fst

    ùîπ  = CompType‚ÜíErrorDomain B
    ùîπ' = CompType‚ÜíErrorDomain B'

    rB  = idEDRel ùîπ
    rB' = idEDRel ùîπ'

  U-leftRep :
    LeftRepC B B' d ‚Üí
    LeftRepV (Types.U B) (Types.U B') (U-rel d)
  U-leftRep œÅd = mkLeftRepV (Types.U B) (Types.U B') (U-rel d) eUd Œ¥lFc UpRFc Œ¥rFc UpLFc
    where
     
      -- Data corresponding to d
      ed   = embC _ _ _ œÅd
      Œ¥ld  = Œ¥leC _ _ _ œÅd
      Œ¥rd  = Œ¥reC _ _ _ œÅd
      UpLd = UpLC _ _ _ œÅd
      UpRd = UpRC _ _ _ œÅd

      -- Data corresponding to Ud
      eUd : PBMor (U-ob ùîπ) (U-ob ùîπ')
      eUd = U-mor ed

      Œ¥lFc : ‚ü® _ ‚äï MB ‚ü©
      Œ¥lFc = i‚ÇÇ .fst Œ¥ld

      UpRFc : PBSq (U-rel (idEDRel ùîπ)) (U-rel d) (U-mor (iB Œ¥ld .fst)) (U-mor ed)
      UpRFc = U-sq (idEDRel ùîπ) d (iB Œ¥ld .fst) ed UpRd

      Œ¥rFc : ‚ü® _ ‚äï MB' ‚ü©
      Œ¥rFc = i‚ÇÇ .fst Œ¥rd

      UpLFc : PBSq (U-rel d) (U-rel (idEDRel ùîπ')) (U-mor ed) (U-mor (iB' Œ¥rd .fst))
      UpLFc = U-sq d (idEDRel ùîπ') ed (iB' Œ¥rd .fst) UpLd


  U-rightRep :
    RightRepC B B' d ‚Üí
    RightRepV (Types.U B) (Types.U B') (U-rel d)
  U-rightRep œÅd = mkRightRepV (Types.U B) (Types.U B') (U-rel d) pUd Œ¥lUd DnRUd Œ¥rUd DnLUd
    where

      -- Data corresponding to d
      pd   = projC _ _ _ œÅd
      Œ¥ld  = Œ¥lpC  _ _ _ œÅd
      Œ¥rd  = Œ¥rpC  _ _ _ œÅd
      DnRd = DnRC  _ _ _ œÅd
      DnLd = DnLC  _ _ _ œÅd

      -- Data corresponding to Ud
      pUd : PBMor (U-ob ùîπ') (U-ob ùîπ)
      pUd = U-mor pd

      Œ¥lUd : ‚ü® _ ‚äï MB ‚ü©
      Œ¥lUd = i‚ÇÇ .fst Œ¥ld

      DnRUd : PBSq (U-rel d) (U-rel rB) (U-mor (iB Œ¥ld .fst)) pUd
      DnRUd = U-sq d rB (iB Œ¥ld .fst) pd DnRd

      Œ¥rUd : ‚ü® _ ‚äï MB' ‚ü©
      Œ¥rUd = i‚ÇÇ .fst Œ¥rd

      DnLUd : PBSq (U-rel rB') (U-rel d) pUd (U-mor (iB' Œ¥rd .fst))
      DnLUd = U-sq rB' d pd (iB' Œ¥rd .fst) DnLd


-----------------------------------------------------------------------------------

-- The functor √ó preserves quasi-representability.

module _
  {A‚ÇÅ  : ValType ‚ÑìA‚ÇÅ  ‚Ñì‚â§A‚ÇÅ  ‚Ñì‚âàA‚ÇÅ ‚ÑìMA‚ÇÅ} {A‚ÇÅ'  : ValType ‚ÑìA‚ÇÅ'  ‚Ñì‚â§A‚ÇÅ'  ‚Ñì‚âàA‚ÇÅ' ‚ÑìMA‚ÇÅ'}
  {A‚ÇÇ  : ValType ‚ÑìA‚ÇÇ  ‚Ñì‚â§A‚ÇÇ  ‚Ñì‚âàA‚ÇÇ ‚ÑìMA‚ÇÇ} {A‚ÇÇ'  : ValType ‚ÑìA‚ÇÇ'  ‚Ñì‚â§A‚ÇÇ'  ‚Ñì‚âàA‚ÇÇ' ‚ÑìMA‚ÇÇ'}
  (c‚ÇÅ : PBRel (ValType‚ÜíPredomain A‚ÇÅ) (ValType‚ÜíPredomain A‚ÇÅ') ‚Ñìc‚ÇÅ)
  (c‚ÇÇ : PBRel (ValType‚ÜíPredomain A‚ÇÇ) (ValType‚ÜíPredomain A‚ÇÇ') ‚Ñìc‚ÇÇ)
  where

  private
    MA‚ÇÅ  = PtbV A‚ÇÅ
    MA‚ÇÅ' = PtbV A‚ÇÅ'
    MA‚ÇÇ  = PtbV A‚ÇÇ
    MA‚ÇÇ' = PtbV A‚ÇÇ'

    iA‚ÇÅ  = interpV A‚ÇÅ .fst
    iA‚ÇÅ' = interpV A‚ÇÅ' .fst
    iA‚ÇÇ  = interpV A‚ÇÇ .fst
    iA‚ÇÇ' = interpV A‚ÇÇ' .fst

    ùî∏‚ÇÅ  = ValType‚ÜíPredomain A‚ÇÅ
    ùî∏‚ÇÅ' = ValType‚ÜíPredomain A‚ÇÅ'
    ùî∏‚ÇÇ  = ValType‚ÜíPredomain A‚ÇÇ
    ùî∏‚ÇÇ' = ValType‚ÜíPredomain A‚ÇÇ'

    rA‚ÇÅ  = idPRel ùî∏‚ÇÅ
    rA‚ÇÅ' = idPRel ùî∏‚ÇÅ'
    rA‚ÇÇ  = idPRel ùî∏‚ÇÇ
    rA‚ÇÇ' = idPRel ùî∏‚ÇÇ'

    i√ó  = interpV (A‚ÇÅ Types.√ó A‚ÇÇ) .fst
    i√ó' = interpV (A‚ÇÅ' Types.√ó A‚ÇÇ') .fst

  
  √ó-leftRep :
    LeftRepV A‚ÇÅ A‚ÇÅ' c‚ÇÅ ‚Üí
    LeftRepV A‚ÇÇ A‚ÇÇ' c‚ÇÇ ‚Üí
    LeftRepV (A‚ÇÅ Types.√ó A‚ÇÇ) (A‚ÇÅ' Types.√ó A‚ÇÇ') (c‚ÇÅ √ópbmonrel c‚ÇÇ)
  √ó-leftRep œÅ‚ÇÅ œÅ‚ÇÇ = mkLeftRepV (A‚ÇÅ √ó A‚ÇÇ) (A‚ÇÅ' √ó A‚ÇÇ') (c‚ÇÅ √ópbmonrel c‚ÇÇ)
    e√ó Œ¥l√ó UpR√ó Œ¥r√ó UpL√ó
    where
      -- Data corresponding to c‚ÇÅ
      ec‚ÇÅ   = embV _ _ _ œÅ‚ÇÅ
      Œ¥lc‚ÇÅ  = Œ¥leV _ _ _ œÅ‚ÇÅ
      Œ¥rc‚ÇÅ  = Œ¥reV _ _ _ œÅ‚ÇÅ
      UpLc‚ÇÅ = UpLV _ _ _ œÅ‚ÇÅ
      UpRc‚ÇÅ = UpRV _ _ _ œÅ‚ÇÅ

      -- Data corresponding to c‚ÇÇ
      ec‚ÇÇ   = embV _ _ _ œÅ‚ÇÇ
      Œ¥lc‚ÇÇ  = Œ¥leV _ _ _ œÅ‚ÇÇ
      Œ¥rc‚ÇÇ  = Œ¥reV _ _ _ œÅ‚ÇÇ
      UpLc‚ÇÇ = UpLV _ _ _ œÅ‚ÇÇ
      UpRc‚ÇÇ = UpRV _ _ _ œÅ‚ÇÇ

      -- Data corresponding to c‚ÇÅ √ó c‚ÇÇ
      e√ó : PBMor (ùî∏‚ÇÅ √ódp ùî∏‚ÇÇ) (ùî∏‚ÇÅ' √ódp ùî∏‚ÇÇ')
      e√ó  = ec‚ÇÅ √ómor ec‚ÇÇ

      Œ¥l√ó : ‚ü® MA‚ÇÅ ‚äï MA‚ÇÇ ‚ü©
      Œ¥l√ó = (i‚ÇÇ .fst Œ¥lc‚ÇÇ) FP.¬∑ (i‚ÇÅ .fst Œ¥lc‚ÇÅ)

      -- In the definitions of UpR√ó and UpL√ó, Agda seems to be implicitly using the
      -- fact that rA‚ÇÅ' √ó rA‚ÇÇ' = r(A‚ÇÅ' √ó A‚ÇÇ').
      UpR√ó : PBSq (idPRel (ùî∏‚ÇÅ √ódp ùî∏‚ÇÇ)) (c‚ÇÅ √ópbmonrel c‚ÇÇ) (i√ó Œ¥l√ó .fst) e√ó
      UpR√ó = CompSqV
        {c‚ÇÅ = rA‚ÇÅ √ópbmonrel rA‚ÇÇ} {c‚ÇÇ = c‚ÇÅ √ópbmonrel rA‚ÇÇ} {c‚ÇÉ = c‚ÇÅ √ópbmonrel c‚ÇÇ}
        {f‚ÇÅ = (iA‚ÇÅ Œ¥lc‚ÇÅ .fst) √ómor Id} {g‚ÇÅ = ec‚ÇÅ √ómor Id}
        {f‚ÇÇ = Id √ómor (iA‚ÇÇ Œ¥lc‚ÇÇ .fst)} {g‚ÇÇ = Id √ómor ec‚ÇÇ}
        (UpRc‚ÇÅ √ó-Sq (Predom-IdSqV rA‚ÇÇ))
        ((Predom-IdSqV c‚ÇÅ) √ó-Sq UpRc‚ÇÇ)

      Œ¥r√ó : ‚ü® MA‚ÇÅ' ‚äï MA‚ÇÇ' ‚ü©
      Œ¥r√ó = (i‚ÇÇ .fst Œ¥rc‚ÇÇ) FP.¬∑ (i‚ÇÅ .fst Œ¥rc‚ÇÅ)

      UpL√ó : PBSq (c‚ÇÅ √ópbmonrel c‚ÇÇ) (idPRel (ùî∏‚ÇÅ' √ódp ùî∏‚ÇÇ')) e√ó (i√ó' Œ¥r√ó .fst)
      UpL√ó = CompSqV
        {c‚ÇÅ = c‚ÇÅ √ópbmonrel c‚ÇÇ} {c‚ÇÇ = rA‚ÇÅ' √ópbmonrel c‚ÇÇ} {c‚ÇÉ = rA‚ÇÅ' √ópbmonrel rA‚ÇÇ'}
        {f‚ÇÅ = ec‚ÇÅ √ómor Id} {g‚ÇÅ = (iA‚ÇÅ' Œ¥rc‚ÇÅ .fst) √ómor Id}
        {f‚ÇÇ = Id √ómor ec‚ÇÇ} {g‚ÇÇ = Id √ómor (iA‚ÇÇ' Œ¥rc‚ÇÇ .fst)}
        (UpLc‚ÇÅ √ó-Sq (Predom-IdSqV c‚ÇÇ))
        ((Predom-IdSqV rA‚ÇÅ') √ó-Sq UpLc‚ÇÇ)

-----------------------------------------------------------------------------------

-- The functor ‚äé preserves quasi-representability.



-----------------------------------------------------------------------------------

-- The functor ‚ü∂ preserves quasi-representability.

module _
  {A  : ValType ‚ÑìA  ‚Ñì‚â§A  ‚Ñì‚âàA  ‚ÑìMA} 
  {A' : ValType ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA' ‚ÑìMA'}
  {B  : CompType ‚ÑìB  ‚Ñì‚â§B  ‚Ñì‚âàB  ‚ÑìMB}
  {B' : CompType ‚ÑìB' ‚Ñì‚â§B' ‚Ñì‚âàB' ‚ÑìMB'}
  (c  : PBRel (ValType‚ÜíPredomain A) (ValType‚ÜíPredomain A') ‚Ñìc)     
  
  (d  : ErrorDomRel (CompType‚ÜíErrorDomain B) (CompType‚ÜíErrorDomain B') ‚Ñìd)
  
  where

  private
    MA  = PtbV A
    iA  = interpV A .fst
    MA' = PtbV A'
    iA' = interpV A' .fst

    ùî∏  = ValType‚ÜíPredomain A
    ùî∏' = ValType‚ÜíPredomain A'

    rA  = idPRel ùî∏
    rA' = idPRel ùî∏'

    MB  = PtbC B
    iB  = interpC B .fst
    MB' = PtbC B'
    iB' = interpC B' .fst

    ùîπ  = CompType‚ÜíErrorDomain B
    ùîπ' = CompType‚ÜíErrorDomain B'

    rB  = idEDRel ùîπ
    rB' = idEDRel ùîπ'

    i-arr  = interpC (A  Types.‚ü∂ B)  .fst
    i-arr' = interpC (A' Types.‚ü∂ B') .fst


  RightRepArrow :
    (œÅc : LeftRepV A A' c) ‚Üí
    (œÅd : RightRepC B B' d) ‚Üí
    RightRepC (A Types.‚ü∂ B) (A' Types.‚ü∂ B') (c ‚ü∂rel d)
  RightRepArrow œÅc œÅd = mkRightRepC (A Types.‚ü∂ B) (A' Types.‚ü∂ B') (c ‚ü∂rel d)
    p-arrow Œ¥l-arrow {!!} Œ¥r-arrow {!DnL-arrow!}
    
    where
      -- Data corresponding to c
      ec   = embV _ _ _ œÅc
      Œ¥lc  = Œ¥leV _ _ _ œÅc
      Œ¥rc  = Œ¥reV _ _ _ œÅc
      UpLc = UpLV _ _ _ œÅc
      UpRc = UpRV _ _ _ œÅc

      -- Data corresponding to d
      pd   = projC _ _ _ œÅd
      Œ¥ld  = Œ¥lpC  _ _ _ œÅd
      Œ¥rd  = Œ¥rpC  _ _ _ œÅd
      DnRd = DnRC  _ _ _ œÅd
      DnLd = DnLC  _ _ _ œÅd

      -- Data corresponding to c ‚ü∂ d
      p-arrow : ErrorDomMor (ùî∏' ‚ü∂ob ùîπ') (ùî∏ ‚ü∂ob ùîπ)
      p-arrow = (Id ‚ü∂mor pd) ‚àòed (ec ‚ü∂mor IdE) -- ec ‚ü∂mor pd

      Œ¥l-arrow : ‚ü® MA ^op ‚äï MB ‚ü©
      Œ¥l-arrow = (i‚ÇÇ .fst Œ¥ld) FP.¬∑ (i‚ÇÅ .fst Œ¥lc)

      DnR-arrow : ErrorDomSq (c ‚ü∂rel d) (rA ‚ü∂rel rB) (i-arr Œ¥l-arrow .fst) p-arrow
      DnR-arrow = ED-CompSqV
        {d‚ÇÅ = c ‚ü∂rel d} {d‚ÇÇ = rA ‚ü∂rel d} {d‚ÇÉ = rA ‚ü∂rel rB}
        {œï‚ÇÅ = (iA Œ¥lc .fst) ‚ü∂mor IdE} {œï‚ÇÅ' = ec ‚ü∂mor IdE}
        {œï‚ÇÇ = Id ‚ü∂mor (iB Œ¥ld .fst)}  {œï‚ÇÇ' = Id ‚ü∂mor pd}
        (UpRc ‚ü∂sq (ED-IdSqV d))
        ((Predom-IdSqV rA) ‚ü∂sq DnRd)

      Œ¥r-arrow : ‚ü® MA' ^op ‚äï MB' ‚ü©
      Œ¥r-arrow = (i‚ÇÇ .fst Œ¥rd) FP.¬∑ (i‚ÇÅ .fst Œ¥rc)

      DnL-arrow : ErrorDomSq (rA' ‚ü∂rel rB') (c ‚ü∂rel d) p-arrow (i-arr' Œ¥r-arrow .fst)
      DnL-arrow = ED-CompSqV
        {d‚ÇÅ = rA' ‚ü∂rel rB'} {d‚ÇÇ = c ‚ü∂rel rB'} {d‚ÇÉ = c ‚ü∂rel d}
        {œï‚ÇÅ = ec ‚ü∂mor IdE} {œï‚ÇÅ' = (iA' Œ¥rc .fst) ‚ü∂mor IdE}
        {œï‚ÇÇ = Id ‚ü∂mor pd}  {œï‚ÇÇ' = Id ‚ü∂mor (iB' Œ¥rd .fst)}
        (UpLc ‚ü∂sq (ED-IdSqV rB'))
        ((Predom-IdSqV c) ‚ü∂sq DnLd)


-----------------------------------------------------------------------------------


-- If Fc is quasi-right-representable, and Ud is quasi-left-representable,
-- then U(c ‚ü∂ d) is quasi-left representable.


module _
  {A  : ValType ‚ÑìA  ‚Ñì‚â§A  ‚Ñì‚âàA  ‚ÑìMA} 
  {A' : ValType ‚ÑìA' ‚Ñì‚â§A' ‚Ñì‚âàA' ‚ÑìMA'}
  {B  : CompType ‚ÑìB  ‚Ñì‚â§B  ‚Ñì‚âàB  ‚ÑìMB}
  {B' : CompType ‚ÑìB' ‚Ñì‚â§B' ‚Ñì‚âàB' ‚ÑìMB'}
  (c  : PBRel (ValType‚ÜíPredomain A) (ValType‚ÜíPredomain A') ‚Ñìc)     
  (d  : ErrorDomRel (CompType‚ÜíErrorDomain B) (CompType‚ÜíErrorDomain B') ‚Ñìd)
  where

  private
    ùî∏ = ValType‚ÜíPredomain A
    ùî∏' = ValType‚ÜíPredomain A'

    ùîπ = CompType‚ÜíErrorDomain B
    ùîπ' = CompType‚ÜíErrorDomain B'

    MFA  = PtbC (Types.F A)
    MFA' = PtbC (Types.F A')
    MUB  = PtbV (Types.U B)
    MUB' = PtbV (Types.U B')

    iFA : _ ‚Üí _
    iFA = fst ‚àò interpC (Types.F A) .fst

    iFA' : _ ‚Üí _
    iFA' = fst ‚àò interpC (Types.F A') .fst

    iUB : _ ‚Üí _
    iUB  = fst ‚àò interpV (Types.U B) .fst

    iUB' : _ ‚Üí _
    iUB' = fst ‚àò interpV (Types.U B') .fst

    rA  = idPRel (ValType‚ÜíPredomain A)
    rA' = idPRel (ValType‚ÜíPredomain A')
    rB  = idEDRel (CompType‚ÜíErrorDomain B)
    rB' = idEDRel (CompType‚ÜíErrorDomain B')

    rFA  = idEDRel (CompType‚ÜíErrorDomain (Types.F A))
    rFA' = idEDRel (CompType‚ÜíErrorDomain (Types.F A'))

    rUB  = idPRel (ValType‚ÜíPredomain (Types.U B))
    rUB' = idPRel (ValType‚ÜíPredomain (Types.U B'))

    U-arrow  = Types.U (A Types.‚ü∂ B)
    U-arrow' = Types.U (A' Types.‚ü∂ B')

    module M-arrow  = MonoidStr (PtbV U-arrow .snd)
    module M-arrow' = MonoidStr (PtbV U-arrow' .snd)

    i-arrow : _ ‚Üí _ 
    i-arrow  = fst ‚àò interpV U-arrow  .fst

    i-arrow' : _ ‚Üí _
    i-arrow' = fst ‚àò interpV U-arrow' .fst

    LeftRepUArrow :
      (œÅFc : RightRepC (Types.F A) (Types.F A') (F-rel c)) ‚Üí
      (œÅUd : LeftRepV (Types.U B) (Types.U B') (U-rel d)) ‚Üí
      LeftRepV U-arrow U-arrow' (U-rel (c ‚ü∂rel d))
    LeftRepUArrow œÅFc œÅUd = mkLeftRepV U-arrow U-arrow' (U-rel (c ‚ü∂rel d))
      e-UArrow Œ¥l-UArrow {!!} {!!} {!!}
      where
      
      -- Data corresponding to Fc
      pFc   = projC _ _ _ œÅFc
      Œ¥lFc  = Œ¥lpC  _ _ _ œÅFc
      Œ¥rFc  = Œ¥rpC  _ _ _ œÅFc
      DnRFc = DnRC  _ _ _ œÅFc
      DnLFc = DnLC  _ _ _ œÅFc

      -- Data corresponding to Ud
      eUd   = embV _ _ _ œÅUd
      Œ¥lUd  = Œ¥leV _ _ _ œÅUd
      Œ¥rUd  = Œ¥reV _ _ _ œÅUd
      UpLUd = UpLV _ _ _ œÅUd
      UpRUd = UpRV _ _ _ œÅUd

      -- Data corresponding to U(c ‚ü∂ d)
      e-UArrow : PBMor _ _
      e-UArrow = (pFc ‚ü∂K·¥∏ ùîπ') ‚àòp (ùî∏ ‚ü∂K·¥ø eUd)

      Œ¥l-UArrow : ‚ü® PtbV U-arrow ‚ü©
      Œ¥l-UArrow =  (Kl-Arrow-Ptb-L A B .fst Œ¥lFc)
         M-arrow.¬∑ (Kl-Arrow-Ptb-R A B .fst Œ¥lUd)

      UpR-UArrow : PBSq (U-rel (rA ‚ü∂rel rB)) (U-rel (c ‚ü∂rel d)) (i-arrow Œ¥l-UArrow) e-UArrow
      UpR-UArrow = {!!}
        where
          sq1 : PBSq (U-rel (rA ‚ü∂rel rB)) (U-rel (rA ‚ü∂rel d)) (ùî∏ ‚ü∂K·¥ø iUB Œ¥lUd) (ùî∏ ‚ü∂K·¥ø eUd)
          sq1 = KlArrowMorphism·¥ø-sq (idPRel ùî∏) {d·µ¢ = rB} {d‚Çí = d} {f = iUB Œ¥lUd} {g = eUd} UpRUd

          sq2 : PBSq (U-rel (rA ‚ü∂rel d)) (U-rel (c ‚ü∂rel d)) (iFA Œ¥lFc ‚ü∂K·¥∏ ùîπ) (pFc ‚ü∂K·¥∏ ùîπ')
          sq2 = KlArrowMorphism·¥∏-sq {c·µ¢ = rA} {c‚Çí = c} (iFA Œ¥lFc) pFc {d = d} DnRFc

          sq-comp : PBSq (U-rel (rA ‚ü∂rel rB)) (U-rel (c ‚ü∂rel d)) ((iFA Œ¥lFc ‚ü∂K·¥∏ ùîπ) ‚àòp (ùî∏ ‚ü∂K·¥ø iUB Œ¥lUd)) e-UArrow
          sq-comp = CompSqV {c‚ÇÅ = U-rel (rA ‚ü∂rel rB)} {c‚ÇÇ = U-rel (rA ‚ü∂rel d)} {c‚ÇÉ = U-rel (c ‚ü∂rel d)}
                            {f‚ÇÅ = ùî∏ ‚ü∂K·¥ø iUB Œ¥lUd} {g‚ÇÅ = ùî∏ ‚ü∂K·¥ø eUd} {f‚ÇÇ = iFA Œ¥lFc ‚ü∂K·¥∏ ùîπ} {g‚ÇÇ = pFc ‚ü∂K·¥∏ ùîπ'}
                            sq1 sq2

          -- We need to use the fact that the following are equal:
          --
          -- 1. interpreting Œ¥lFc as a semantic perturbation on FA
          -- and then applying the Kleisli action on morphisms, i.e.,
          -- (iFA Œ¥lFc) ‚ü∂K·¥∏ ùîπ.
          --
          -- 2. first applying the Kleisli action on syntactic perturbations
          -- to obtain a syntactic perturbation of U(A ‚ü∂ B), and then
          -- interpreting that as a semantic perturbation on U(A ‚ü∂ B).
          





-- The functors Œ† and Œ£ preserve quasi-representability.




