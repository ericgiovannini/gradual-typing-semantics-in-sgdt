{-# OPTIONS --cubical --rewriting --guarded #-}

 -- to allow opening this module in other files while there are still holes
{-# OPTIONS --allow-unsolved-metas #-}

open import Later

module Lemmas (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Nat renaming (‚Ñï to Nat) hiding (_^_)

open import Cubical.Relation.Binary
open import Cubical.Relation.Binary.Poset
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Transport

open import Cubical.Data.Unit
open import Cubical.Data.Sigma
open import Cubical.Data.Empty

open import Cubical.Foundations.Function

open import StrongBisimulation k
open import GradualSTLC
open import SyntacticTermPrecision k

private
  variable
    l : Level
    A B : Set l
private
  ‚ñπ_ : Set l ‚Üí Set l
  ‚ñπ_ A = ‚ñπ_,_ k A

open ùïÉ

{-
test : (A B : Type) -> (eq : A ‚â° B) -> (x : A) -> (T : (A : Type) -> A -> Type) ->
 (T A x) -> (T B (transport eq x))
test A B eq x T Tx = transport (Œª i -> T (eq i) (transport-filler eq x i)) Tx

-- transport (Œª i -> T (eq i) ?) Tx
-- Goal : eq i
-- Constraints:
-- x = ?8 (i = i0) : A
-- ?8 (i = i1) = transp (Œª i‚ÇÅ ‚Üí eq i‚ÇÅ) i0 x : B


-- transport-filler : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} (p : A ‚â° B) (x : A)
--                   ‚Üí PathP (Œª i ‚Üí p i) x (transport p x)
                   

test' : (A B : Predomain) -> (S : Type) ->
 (eq : A ‚â° B)  ->
 (x : ‚ü® A ‚ü©) ->
 (T : (A : Predomain) -> ‚ü® A ‚ü© -> Type) ->
 (T A x) -> T B (transport (Œª i -> ‚ü® eq i ‚ü©) x)
test' A B S eq x T Tx = transport
  (Œª i -> T (eq i) (transport-filler (Œª j ‚Üí ‚ü® eq j ‚ü©) x i))
  Tx
-}


-- If A ‚â° B, then we can translate knowledge about a relation on A
-- to its image in B obtained by transporting the related elements of A
-- along the equality of the underlying sets of A and B
rel-transport :
  {A B : Predomain} ->
  (eq : A ‚â° B) ->
  {a1 a2 : ‚ü® A ‚ü©} ->
  rel A a1 a2 ->
  rel B
    (transport (Œª i -> ‚ü® eq i ‚ü©) a1)
    (transport (Œª i -> ‚ü® eq i ‚ü©) a2)
rel-transport {A} {B} eq {a1} {a2} a1‚â§a2 =
  transport (Œª i -> rel (eq i)
    (transport-filler (Œª j -> ‚ü® eq j ‚ü©) a1 i)
    (transport-filler (Œª j -> ‚ü® eq j ‚ü©) a2 i))
  a1‚â§a2

rel-transport-sym : {A B : Predomain} ->
  (eq : A ‚â° B) ->
  {b1 b2 : ‚ü® B ‚ü©} ->
  rel B b1 b2 ->
  rel A
    (transport (Œª i ‚Üí ‚ü® sym eq i ‚ü©) b1)
    (transport (Œª i ‚Üí ‚ü® sym eq i ‚ü©) b2)
rel-transport-sym eq {b1} {b2} b1‚â§b2 = rel-transport (sym eq) b1‚â§b2


mTransport : {A B : Predomain} -> (eq : A ‚â° B) -> ‚ü® A ==> B ‚ü©
mTransport {A} {B} eq = record {
  f = Œª b ‚Üí transport (Œª i -> ‚ü® eq i ‚ü©) b ;
  isMon = Œª {b1} {b2} b1‚â§b2 ‚Üí rel-transport eq b1‚â§b2 }


mTransportSym : {A B : Predomain} -> (eq : A ‚â° B) -> ‚ü® B ==> A ‚ü©
mTransportSym {A} {B} eq = record {
  f = Œª b ‚Üí transport (Œª i -> ‚ü® sym eq i ‚ü©) b ;
  isMon = Œª {b1} {b2} b1‚â§b2 ‚Üí rel-transport (sym eq) b1‚â§b2 }


-- Transporting the domain of a monotone function preserves monotonicity
mon-transport-domain : {A B C : Predomain} ->
  (eq : A ‚â° B) ->
  (f : MonFun A C) ->
  {b1 b2 : ‚ü® B ‚ü©} ->
  (rel B b1 b2) ->
  rel C
    (MonFun.f f (transport (Œª i ‚Üí ‚ü® sym eq i ‚ü© ) b1))
    (MonFun.f f (transport (Œª i ‚Üí ‚ü® sym eq i ‚ü© ) b2))
mon-transport-domain eq f {b1} {b2} b1‚â§b2 =
  MonFun.isMon f (rel-transport (sym eq) b1‚â§b2)

mTransportDomain : {A B C : Predomain} ->
  (eq : A ‚â° B) ->
  MonFun A C ->
  MonFun B C
mTransportDomain {A} {B} {C} eq f = record {
  f = g eq f;
  isMon = mon-transport-domain eq f }
  where
    g : {A B C : Predomain} ->
      (eq : A ‚â° B) ->
      MonFun A C ->
      ‚ü® B ‚ü© -> ‚ü® C ‚ü©
    g eq f b = MonFun.f f (transport (Œª i ‚Üí ‚ü® sym eq i ‚ü© ) b)






-- rel (ùïÉ B) (ext f la) (ext f' la') ‚â° _A_1119
-- ord (ext f la) (ext f' la') ‚â° 
-- ord' (next ord) (ext' f (next (ext f)) la) (ext' f (next (ext f)) la')


-- ext respects monotonicity 
ext-monotone : {A B : Predomain} ->
  (f f' : ‚ü® A ‚ü© -> ‚ü® (ùïÉ B) ‚ü©) ->
  fun-order A (ùïÉ B) f f' ->
  (la la' : ‚ü® ùïÉ A ‚ü©) ->
  rel (ùïÉ A) la la' ->
  rel (ùïÉ B) (ext f la) (ext f' la')
ext-monotone {A} {B} f f' f‚â§f' la la' la‚â§la' =
  let fixed = fix (monotone-ext' f f' f‚â§f') in
  transport
    (sym (Œª i -> unfold-ord B i (unfold-ext f i la) (unfold-ext f' i la')))
    (fixed la la' (transport (Œª i ‚Üí unfold-ord A i la la') la‚â§la'))
  where
    monotone-ext' :
      (f f' : ‚ü® A ‚ü© -> ‚ü® (ùïÉ B) ‚ü©) ->
      (fun-order A (ùïÉ B) f f') ->
      ‚ñπ (
        (la la' : ‚ü® ùïÉ A ‚ü©) ->
         ord' A (next (ord A)) la la' ->
         ord' B (next (ord B))
          (ext' f  (next (ext f))  la)
          (ext' f' (next (ext f')) la')) ->
     (la la' : ‚ü® ùïÉ A ‚ü©) ->
       ord' A (next (ord A)) la la' ->
       ord' B (next (ord B))
        (ext' f  (next (ext f))  la)
        (ext' f' (next (ext f')) la')
    monotone-ext' f f' f‚â§f' IH (Œ∑ x) (Œ∑ y) x‚â§y =
      transport
      (Œª i ‚Üí unfold-ord B i (f x) (f' y))
      (f‚â§f' x y x‚â§y)
    monotone-ext' f f' f‚â§f' IH ‚Ñß la' la‚â§la' = tt
    monotone-ext' f f' f‚â§f' IH (Œ∏ lx~) (Œ∏ ly~) la‚â§la' = Œª t ->
      transport
        (Œª i ‚Üí (sym (unfold-ord B)) i
          (sym (unfold-ext f) i (lx~ t))
          (sym (unfold-ext f') i (ly~ t)))
        (IH t (lx~ t) (ly~ t)
          (transport (Œª i -> unfold-ord A i (lx~ t) (ly~ t)) (la‚â§la' t)))



{-
ext-monotone' : {A B : Predomain} ->
  {la la' : ‚ü® ùïÉ A ‚ü©} ->
  (f f' : ‚ü® A ‚ü© -> ‚ü® (ùïÉ B) ‚ü©) ->
  rel (ùïÉ A) la la' ->
  fun-order A (ùïÉ B) f f' ->
  rel (ùïÉ B) (ext f la) (ext f' la')
ext-monotone' {A} {B} {la} {la'} f f' la‚â§la' f‚â§f' =
  let fixed = fix (monotone-ext' f f' f‚â§f') in
  --transport
    --(sym (Œª i -> ord B (unfold-ext f i la) (unfold-ext f' i la')))
    (fixed la la' (transport (Œª i ‚Üí unfold-ord A i la la') la‚â§la'))
  where
    monotone-ext' :
      (f f' : ‚ü® A ‚ü© -> ‚ü® (ùïÉ B) ‚ü©) ->
      (fun-order A (ùïÉ B) f f') ->
      ‚ñπ (
        (la la' : ‚ü® ùïÉ A ‚ü©) ->
         ord' A (next (ord A)) la la' ->
         ord B
          (ext f  la)
          (ext f' la')) ->
     (la la' : ‚ü® ùïÉ A ‚ü©) ->
       ord' A (next (ord A)) la la' ->
       ord B
        (ext f  la)
        (ext f' la')
    monotone-ext' f f' f‚â§f' IH (Œ∑ x) (Œ∑ y) x‚â§y = {!!} -- (f‚â§f' x y x‚â§y)
    monotone-ext' f f' f‚â§f' IH ‚Ñß la' la‚â§la' = transport (sym (Œª i -> unfold-ord B i (ext f ‚Ñß) (ext f' la'))) {!!}
      -- transport (sym (Œª i ‚Üí unfold-ord B i (ext' f (next (ext f)) ‚Ñß) (ext' f' (next (ext f')) la'))) tt
    monotone-ext' f f' f‚â§f' IH (Œ∏ lx~) (Œ∏ ly~) la‚â§la' = {!!} -- Œª t -> ?
-}


bind-monotone : {A B : Predomain} ->
  {la la' : ‚ü® ùïÉ A ‚ü©} ->
  (f f' : ‚ü® A ‚ü© -> ‚ü® (ùïÉ B) ‚ü©) ->
  rel (ùïÉ A) la la' ->
  fun-order A (ùïÉ B) f f' ->
  rel (ùïÉ B) (bind la f) (bind la' f')
bind-monotone {A} {B} {la} {la'} f f' la‚â§la' f‚â§f' =
  ext-monotone f f' f‚â§f' la la' la‚â§la'
   

mapL-monotone : {A B : Predomain} ->
  {la la' : ‚ü® ùïÉ A ‚ü©} ->
  (f f' : ‚ü® A ‚ü© -> ‚ü® B ‚ü©) ->
  rel (ùïÉ A) la la' ->
  fun-order A B f f' ->
  rel (ùïÉ B) (mapL f la) (mapL f' la')
mapL-monotone {A} {B} {la} {la'} f f' la‚â§la' f‚â§f' =
  bind-monotone (ret ‚àò f) (ret ‚àò f') la‚â§la'
    (Œª a1 a2 a1‚â§a2 ‚Üí ord-Œ∑-monotone B (f‚â§f' a1 a2 a1‚â§a2))

-- As a corollary/special case, we can consider the case of a single
-- monotone function.
monotone-bind-mon : {A B : Predomain} ->
  {la la' : ‚ü® ùïÉ A ‚ü©} ->
  (f : MonFun A (ùïÉ B)) ->
  (rel (ùïÉ A) la la') ->
  rel (ùïÉ B) (bind la (MonFun.f f)) (bind la' (MonFun.f f))
monotone-bind-mon f la‚â§la' =
  bind-monotone (MonFun.f f) (MonFun.f f) la‚â§la' (mon-fun-order-refl f)

{-
-- bind respects monotonicity

monotone-bind : {A B : Predomain} ->
  {la la' : ‚ü® ùïÉ A ‚ü©} ->
  (f f' : MonFun A (ùïÉ B)) ->
  rel (ùïÉ A) la la' ->
  rel (arr' A (ùïÉ B)) f f' ->
  rel (ùïÉ B) (bind la (MonFun.f f)) (bind la' (MonFun.f f'))
monotone-bind {A} {B} {la} {la'} f f' la‚â§la' f‚â§f' =
  {!!}

  where
    
    monotone-ext' :
     
      (f f' : MonFun A (ùïÉ B)) ->
      (rel (arr' A (ùïÉ B)) f f') ->
      ‚ñπ (
        (la la' : ‚ü® ùïÉ A ‚ü©) ->
         ord' A (next (ord A)) la la' ->
         ord' B (next (ord B))
          (ext' (MonFun.f f)  (next (ext (MonFun.f f)))  la)
          (ext' (MonFun.f f') (next (ext (MonFun.f f'))) la')) ->
     (la la' : ‚ü® ùïÉ A ‚ü©) ->
       ord' A (next (ord A)) la la' ->
       ord' B (next (ord B))
        (ext' (MonFun.f f)  (next (ext (MonFun.f f)))  la)
        (ext' (MonFun.f f') (next (ext (MonFun.f f'))) la')
    monotone-ext' f f' f‚â§f' IH (Œ∑ x) (Œ∑ y) x‚â§y =
      transport
      (Œª i ‚Üí unfold-ord B i (MonFun.f f x) (MonFun.f f' y))
      (f‚â§f' x y x‚â§y)
    monotone-ext' f f' f‚â§f' IH ‚Ñß la' la‚â§la' = tt
    monotone-ext' f f' f‚â§f' IH (Œ∏ lx~) (Œ∏ ly~) la‚â§la' = Œª t ->
      transport
        (Œª i ‚Üí (sym (unfold-ord B)) i
          (sym (unfold-ext (MonFun.f f)) i (lx~ t))
          (sym (unfold-ext (MonFun.f f')) i (ly~ t)))
          --(ext (MonFun.f f) (lx~ t))
          --(ext (MonFun.f f') (ly~ t)))
        (IH t (lx~ t) (ly~ t)
          (transport (Œª i -> unfold-ord A i (lx~ t) (ly~ t)) (la‚â§la' t)))
       --  (IH t (Œ∏ lx~) {!Œ∏ ly~!} la‚â§la')
-}
--  unfold-ord : ord ‚â° ord' (next ord)



-- For the Œ∑ case:
--  Goal:
--      ord' B (Œª _ ‚Üí fix (ord' B)) (MonFun.f f x) (MonFun.f f' y)

-- Know: (x‚ÇÅ y‚ÇÅ : fst A) ‚Üí
--      rel A x‚ÇÅ y‚ÇÅ ‚Üí
--      fix (ord' B) (MonFun.f f x‚ÇÅ) (MonFun.f f' y‚ÇÅ)


-- For the Œ∏ case:
-- Goal:
--  ord B
--      ext (MonFun.f f)) (lx~ t)
--      ext (MonFun.f f')) (ly~ t)

-- Know: IH : ...
-- la‚â§la'   : (t‚ÇÅ : Tick k) ‚Üí fix (ord' A) (lx~ t‚ÇÅ) (ly~ t‚ÇÅ)

-- The IH is in terms of ord' (i.e., ord' A (next (ord A)) la la')
-- but the assumption la ‚â§ la' in the Œ∏ case is equivalent to
-- (t‚ÇÅ : Tick k) ‚Üí fix (ord' A) (lx~ t‚ÇÅ) (ly~ t‚ÇÅ)


