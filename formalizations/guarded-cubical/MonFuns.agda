{-# OPTIONS --cubical --rewriting --guarded #-}

 -- to allow opening this module in other files while there are still holes
{-# OPTIONS --allow-unsolved-metas #-}

open import Later

module MonFuns (k : Clock) where

open import Cubical.Foundations.Prelude
open import Cubical.Data.Nat renaming (‚Ñï to Nat)

open import Cubical.Relation.Binary
open import Cubical.Relation.Binary.Poset
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Transport

open import Cubical.Data.Unit
-- open import Cubical.Data.Prod
open import Cubical.Data.Sigma
open import Cubical.Data.Empty

open import Cubical.Foundations.Function

open import StrongBisimulation k
open import GradualSTLC
open import SyntacticTermPrecision k
open import Lemmas k


private
  variable
    l : Level
    A B : Set l
private
  ‚ñπ_ : Set l ‚Üí Set l
  ‚ñπ_ A = ‚ñπ_,_ k A


open ùïÉ

abstract

  -- Composing monotone functions
  mComp : {A B C : Predomain} ->
    -- MonFun (arr' B C) (arr' (arr' A B) (arr' A C))
    ‚ü® (B ==> C) ==> (A ==> B) ==> (A ==> C) ‚ü©
  mComp = record {
    f = Œª fBC ‚Üí
      record {
        f = Œª fAB ‚Üí mComp' fBC fAB ;
        isMon = Œª {f1} {f2} f1‚â§f2 ->
          Œª a1 a2 a1‚â§a2 ‚Üí MonFun.isMon fBC (f1‚â§f2 a1 a2 a1‚â§a2) } ;
    isMon = Œª {f1} {f2} f1‚â§f2 ‚Üí
      Œª fAB1 fAB2 fAB1‚â§fAB2 ‚Üí
        Œª a1 a2 a1‚â§a2 ->
          f1‚â§f2 (MonFun.f fAB1 a1) (MonFun.f fAB2 a2)
            (fAB1‚â§fAB2 a1 a2 a1‚â§a2) }
    where
      mComp' : {A B C : Predomain} -> MonFun B C -> MonFun A B -> MonFun A C
      mComp' f1 f2 = record {
        f = Œª a -> f1 .f (f2 .f a) ;
        isMon = Œª x‚â§y -> f1 .isMon (f2 .isMon x‚â§y) }
        where open MonFun


  -- ùïÉ's return as a monotone function
  mRet : {A : Predomain} -> ‚ü® A ==> ùïÉ A ‚ü©
  mRet {A} = record { f = ret ; isMon = ord-Œ∑-monotone A }


  -- Extending a monotone function to ùïÉ
  mExt : {A B : Predomain} -> ‚ü® (A ==> ùïÉ B) ==> (ùïÉ A ==> ùïÉ B) ‚ü©
  mExt = record {
    f = mExt' ;
    isMon = Œª {f1} {f2} f1‚â§f2  -> ext-monotone (MonFun.f f1) (MonFun.f f2) f1‚â§f2 }
    where
      mExt' : {A B : Predomain} -> MonFun A (ùïÉ B) -> MonFun (ùïÉ A) (ùïÉ B)
      mExt' f = record {
        f = Œª la -> bind la (MonFun.f f) ;
        isMon = monotone-bind-mon f }


  -- Monotone successor function
  mSuc : ‚ü® ‚Ñï ==> ‚Ñï ‚ü©
  mSuc = record {
    f = suc ;
    isMon = Œª {n1} {n2} n1‚â§n2 -> Œª i -> suc (n1‚â§n2 i) }


  -- Combinators

  S : {Œì A B : Predomain} ->
    ‚ü® Œì ==> A ==> B ‚ü© -> ‚ü® Œì ==> A ‚ü© -> ‚ü® Œì ==> B ‚ü©
  S f g =
    record {
      f = Œª Œ≥ -> MonFun.f (MonFun.f f Œ≥) (MonFun.f g Œ≥) ;
      isMon = Œª {Œ≥1} {Œ≥2} Œ≥1‚â§Œ≥2 ‚Üí
        let fŒ≥1‚â§fŒ≥2 = MonFun.isMon f Œ≥1‚â§Œ≥2 in
          fŒ≥1‚â§fŒ≥2 (MonFun.f g Œ≥1) (MonFun.f g Œ≥2) (MonFun.isMon g Œ≥1‚â§Œ≥2) }


  _<*>_ : {Œì A B : Predomain} -> ‚ü® Œì ==> A ==> B ‚ü© -> ‚ü® Œì ==> A ‚ü© -> ‚ü® Œì ==> B ‚ü©
  f <*> g = S f g

  infixl 20 _<*>_


  K : {Œì : Predomain} -> {A : Predomain} -> ‚ü® A ‚ü© -> ‚ü® Œì ==> A ‚ü©
  K {_} {A} = Œª a ‚Üí record {
    f = Œª Œ≥ ‚Üí a ;
    isMon = Œª {a1} {a2} a1‚â§a2 ‚Üí reflexive A a }

  Id : {A : Predomain} -> ‚ü® A ==> A ‚ü©
  Id = record { f = id ; isMon = Œª x‚â§y ‚Üí x‚â§y }

  Curry : {Œì A B : Predomain} -> ‚ü® (Œì √ód A) ==> B ‚ü© -> ‚ü® Œì ==> A ==> B ‚ü©
  Curry f = record { f = Œª Œ≥ ‚Üí
    record { f = Œª a ‚Üí MonFun.f f (Œ≥ , a) ; isMon = {!!} } ; isMon = {!!} }

  Uncrry : {Œì A B : Predomain} -> ‚ü® Œì ==> A ==> B ‚ü© -> ‚ü® (Œì √ód A) ==> B ‚ü©
  Uncrry = {!!}

  swap : {Œì A B : Predomain} -> ‚ü® Œì ==> A ==> B ‚ü© -> ‚ü® A ==> Œì ==> B ‚ü©
  swap f = record {
    f = Œª a ‚Üí
      record {
        f = Œª Œ≥ ‚Üí MonFun.f (MonFun.f f Œ≥) a ;
        isMon = Œª {Œ≥1} {Œ≥2} Œ≥1‚â§Œ≥2 ->
          let fŒ≥1‚â§fŒ≥2 = MonFun.isMon f Œ≥1‚â§Œ≥2 in
          fŒ≥1‚â§fŒ≥2 a a (reflexive _ a) } ;
    isMon = Œª {a1} {a2} a1‚â§a2 ->
      Œª Œ≥1 Œ≥2 Œ≥1‚â§Œ≥2 -> {!!} } -- Œ≥1 Œ≥2 Œ≥1‚â§Œ≥2 ‚Üí {!!} }


  -- Convenience versions of comp, ext, and ret using combinators

  mComp' : {Œì A B C : Predomain} ->
    ‚ü® (Œì ==> B ==> C) ‚ü© -> ‚ü® (Œì ==> A ==> B) ‚ü© -> ‚ü® (Œì ==> A ==> C) ‚ü©
  mComp' f g = (K mComp) <*> f <*> g

  _‚àòm_ :  {Œì A B C : Predomain} ->
    ‚ü® (Œì ==> B ==> C) ‚ü© -> ‚ü® (Œì ==> A ==> B) ‚ü© -> ‚ü® (Œì ==> A ==> C) ‚ü©
  f ‚àòm g = mComp' f g
  infixl 20 _‚àòm_

  mExt' : {Œì A B : Predomain} ->
    ‚ü® (Œì ==> A ==> ùïÉ B) ‚ü© -> ‚ü® (Œì ==> ùïÉ A ==> ùïÉ B) ‚ü©
  mExt' f = K mExt <*> f

  mRet' : {Œì A : Predomain} -> ‚ü® Œì ==> A ‚ü© -> ‚ü® Œì ==> ùïÉ A ‚ü©
  mRet' a = K mRet <*> a


  -- Mapping a monotone function
  mMap : {A B : Predomain} -> ‚ü® (A ==> B) ==> (ùïÉ A ==> ùïÉ B) ‚ü©
  mMap = {!!} -- mExt' (mComp' (Curry {!!}) {!!}) -- mExt (mComp mRet f)


  mMap' : {Œì A B : Predomain} ->
    ‚ü® (Œì ==> A ==> B) ‚ü© -> ‚ü® (Œì ==> ùïÉ A ==> ùïÉ B) ‚ü©
  mMap' = {!!}


  {-
  -- Montone function between function spaces
  mFun : {A A' B B' : Predomain} ->
    MonFun A' A ->
    MonFun B B' ->
    MonFun (arr' A B) (arr' A' B')
  mFun fA'A fBB' = record {
    f = Œª fAB ‚Üí {!!} ; --  mComp (mComp fBB' fAB) fA'A ;
    isMon = Œª {fAB-1} {fAB-2} fAB-1‚â§fAB-2 ‚Üí
      Œª a'1 a'2 a'1‚â§a'2 ->
        MonFun.isMon fBB'
          (fAB-1‚â§fAB-2
            (MonFun.f fA'A a'1)
            (MonFun.f fA'A a'2)
            (MonFun.isMon fA'A a'1‚â§a'2))}

  -- NTS :
  -- In the space of monotone functions from A' to B', we have
  -- mComp (mComp fBB' f1) fA'A) ‚â§ (mComp (mComp fBB' f2) fA'A)
  -- That is, given a'1 and a'2 of type ‚ü® A' ‚ü© with a'1 ‚â§ a'2 we
  -- need to show that
  -- (fBB' ‚àò fAB-1 ‚àò fA'A)(a'1) ‚â§ (fBB' ‚àò fAB-2 ‚àò fA'A)(a'2)
  -- By monotonicity of fBB', STS that
  -- (fAB-1 ‚àò fA'A)(a'1) ‚â§  (fAB-2 ‚àò fA'A)(a'2)
  -- which follows by assumption that fAB-1 ‚â§ fAB-2 and monotonicity of fA'A
  -}

  -- Embedding of function spaces is monotone
  mFunEmb : {A A' B B' : Predomain} ->
    ‚ü® A' ==> ùïÉ A ‚ü© ->
    ‚ü® B ==> B' ‚ü© ->
    ‚ü® (A ==> ùïÉ B) ==> (A' ==> ùïÉ B') ‚ü©
  mFunEmb fA'LA fBB' = (mExt' (mMap' (K fBB') ‚àòm Id)) ‚àòm (K fA'LA)
  -- mComp' (mExt' (mComp' (mMap' (K fBB')) Id)) (K fA'LA)

  mFunProj : {A A' B B' : Predomain} ->
   ‚ü® A ==> A' ‚ü© ->
   ‚ü® B' ==> ùïÉ B ‚ü© ->
   ‚ü® (A' ==> ùïÉ B') ==> ùïÉ (A ==> ùïÉ B) ‚ü©
  mFunProj fAA' fB'LB = mRet' (mExt' (K fB'LB) ‚àòm Id ‚àòm (K fAA'))

  -- 

  {-
  record {
    f = Œª f -> {!!} ; -- mComp (mExt (mComp (mMap fBB') f)) fA'LA ;
    isMon = Œª {f1} {f2} f1‚â§f2 ->
      Œª a'1 a'2 a'1‚â§a'2 ->
        ext-monotone
          (mapL (MonFun.f fBB') ‚àò MonFun.f f1)
          (mapL (MonFun.f fBB') ‚àò MonFun.f f2)
          ({!!})
          (MonFun.isMon fA'LA a'1‚â§a'2) }
  -}

  -- mComp (mExt (mComp (mMap fBB') f1)) fA'LA ‚â§ mComp (mExt (mComp (mMap fBB') f2)) fA'LA
  -- ((ext ((mapL fBB') ‚àò f1)) ‚àò fA'LA) (a'1) ‚â§ ((ext ((mapL fBB') ‚àò f2)) ‚àò fA'LA) (a'2)
